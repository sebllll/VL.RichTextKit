<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RichTextKit</name>
    </assembly>
    <members>
        <member name="T:RichTextKit.Bidi">
            <summary>
            Implementation of Unicode Bidirection Algorithm (UAX #9)
            https://unicode.org/reports/tr9/
            </summary>
            <remarks>
            The Bidi algorithm uses a number of memory arrays for resolved 
            types, level information, bracket types, x9 removal maps and 
            more...
            
            This implementation of the Bidi algorithm has been designed
            to reduce memory pressure on the GC by re-using the same 
            work buffers, so instances of this class should be re-used
            as much as possible.
            </remarks>
        </member>
        <member name="F:RichTextKit.Bidi.Instance">
            <summary>
            A per-thread instance that can be re-used as often
            as necessary.
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.#ctor">
            <summary>
            Constructs a new instance of Bidi algorithm processor
            </summary>
        </member>
        <member name="P:RichTextKit.Bidi.ResolvedLevels">
            <summary>
            Get the resolved levels 
            </summary>
        </member>
        <member name="P:RichTextKit.Bidi.ResolvedParagraphEmbeddingLevel">
            <summary>
            Get the resolved paragraph embedding level
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.Process(RichTextKit.BidiData)">
            <summary>
            Process data from a BidiData instance
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:RichTextKit.Bidi.Process(RichTextKit.Utils.Slice{RichTextKit.Directionality},RichTextKit.Utils.Slice{RichTextKit.PairedBracketType},RichTextKit.Utils.Slice{System.Int32},System.SByte,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{RichTextKit.Utils.Slice{System.SByte}})">
            <summary>
            Processes Bidi Data
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._originalTypes">
            <summary>
            The original Directionality types as provided by the caller
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._pairedBracketTypes">
            <summary>
            Paired bracket types as provided by caller
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._pairedBracketValues">
            <summary>
            Paired bracket values as provided by caller
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._hasBrackets">
            <summary>
            Try if the incoming data is known to contain brackets
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._hasEmbeddings">
            <summary>
            True if the incoming data is known to contain embedding runs
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._hasIsolates">
            <summary>
            True if the incomding data is known to contain isolating runs
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._isolatePairs">
            <summary>
            Two directional mapping of isolate start/end pairs
            </summary>
            <remarks>
            The forward mapping maps the start index to the end index.
            The reverse mapping maps the end index to the start index.
            </remarks>
        </member>
        <member name="F:RichTextKit.Bidi._workingTypes">
            <summary>
            The working Directionality types
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._workingTypesBuffer">
            <summary>
            The buffer underlying _workingTypes
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._resolvedLevels">
            <summary>
            The resolved levels
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._resolvedLevelsBuffer">
            <summary>
            The buffer underlying _resolvedLevels
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._paragraphEmbeddingLevel">
            <summary>
            The resolve paragraph embedding level
            </summary>
        </member>
        <member name="T:RichTextKit.Bidi.Status">
            <summary>
            Status stack entry used while resolving explicit
            embedding levels
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._statusStack">
            <summary>
            The status stack used during resolution of explicit 
            embedding and isolating runs
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._X9Map">
            <summary>
            Mapping used to virtually remove characters for rule X9
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._levelRuns">
            <summary>
            Re-usable list of level runs
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._isolatedRunMapping">
            <summary>
            Mapping for the current isolating sequence, built
            by joining level runs from the x9 map.
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._pendingIsolateOpenings">
            <summary>
            A stack of pending isolate openings used by FindIsolatePairs()
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.FindIsolatePairs">
            <summary>
            Build a list of matching isolates for a directionality slice 
            Implements BD9
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.ResolveExplicitEmbeddingLevels">
            <summary>
            Resolve the explicit embedding levels from the original
            data.  Implements rules X1 to X8.
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.ResolveEmbeddingLevel(RichTextKit.Utils.Slice{RichTextKit.Directionality})">
            <summary>
            Resolve the paragraph embedding level if not explicitly passed
            by the caller. Also used by rule X5c for FSI isolating sequences.
            </summary>
            <param name="data">The data to be evaluated</param>
            <returns>The resolved embedding level</returns>
        </member>
        <member name="M:RichTextKit.Bidi.BuildX9RemovalMap">
            <summary>
            Build a map to the original data positions that excludes all
            the types defined by rule X9
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.mapX9(System.Int32)">
            <summary>
            Find the original character index for an entry in the X9 map
            </summary>
            <param name="index">Index in the x9 removal map</param>
            <returns>Index to the original data</returns>
        </member>
        <member name="T:RichTextKit.Bidi.LevelRun">
            <summary>
            Provides information about a level run - a continuous
            sequence of equal levels.
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.AddLevelRun(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a new level run
            </summary>
            <remarks>
            This method resolves the sos and eos values for the run
            and adds the run to the list
            /// </remarks>
            <param name="start">The index of the start of the run (in x9 removed units)</param>
            <param name="length">The length of the run (in x9 removed units)</param>
            <param name="level">The level of the run</param>
        </member>
        <member name="M:RichTextKit.Bidi.FindLevelRuns">
            <summary>
            Find all runs of the same level, populating the _levelRuns
            collection
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.FindRunForIndex(System.Int32)">
            <summary>
            Given a character index, find the level run that starts at that position
            </summary>
            <param name="index">The index into the original (unmapped) data</param>
            <returns>The index of the run that starts at that index</returns>
        </member>
        <member name="M:RichTextKit.Bidi.ProcessIsolatedRunSequences">
            <summary>
            Determine and the process all isolated run sequences
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._runLevel">
            <summary>
            The level of the isolating run currently being processed
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._runDirection">
            <summary>
            The direction of the isolating run currently being processed
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._runLength">
            <summary>
            The length of the isolating run currently being processed
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._runResolvedTypes">
            <summary>
            A mapped slice of the resolved types for the isolating run currently
            being processed
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._runOriginalTypes">
            <summary>
            A mapped slice of the original types for the isolating run currently
            being processed
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._runLevels">
            <summary>
            A mapped slice of the run levels for the isolating run currently
            being processed
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._runPairedBracketTypes">
            <summary>
            A mapped slice of the paired bracket types of the isolating 
            run currently being processed
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._runPairedBracketValues">
            <summary>
            A mapped slice of the paired bracket values of the isolating 
            run currently being processed
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.ProcessIsolatedRunSequence(RichTextKit.Directionality,RichTextKit.Directionality,System.Int32)">
            <summary>
            Process a single isolated run sequence, where the character sequence
            mapping is currently held in _isolatedRunMapping.
            </summary>
        </member>
        <member name="T:RichTextKit.Bidi.PairedBracketComparer">
            <summary>
            IComparer for BracketPairs
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._pairedBracketComparer">
            <summary>
            An shared instance of the PairedBracket comparer
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi.MaxPairedBracketDepth">
            <summary>
            Maximum pairing depth for paired brackets
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._pendingOpeningBrackets">
            <summary>
            Re-useable list of pending opening brackets used by the 
            LocatePairedBrackets method
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi._pairedBrackets">
            <summary>
            Resolved list of paired brackets
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.LocatePairedBrackets">
            <summary>
            Locate all pair brackets in the current isolating run
            </summary>
            <returns>A sorted list of BracketPairs</returns>
        </member>
        <member name="M:RichTextKit.Bidi.InspectPairedBracket(RichTextKit.Bidi.BracketPair)">
            <summary>
            Inspect a paired bracket set and determine its strong direction
            </summary>
            <param name="pb">The paired bracket to be inpected</param>
            <returns>The direction of the bracket set content</returns>
        </member>
        <member name="M:RichTextKit.Bidi.InspectBeforePairedBracket(RichTextKit.Bidi.BracketPair,RichTextKit.Directionality)">
            <summary>
            Look for a strong type before a paired bracket
            </summary>
            <param name="pb">The paired bracket set to be inspected</param>
            <param name="sos">The sos in case nothing found before the bracket</param>
            <returns>The strong direction before the brackets</returns>
        </member>
        <member name="M:RichTextKit.Bidi.SetPairedBracketDirection(RichTextKit.Bidi.BracketPair,RichTextKit.Directionality)">
            <summary>
            Sets the direction of a bracket pair, including setting the direction of 
            NSM's inside the brackets and following.
            </summary>
            <param name="pb">The paired brackets</param>
            <param name="dir">The resolved direction for the bracket pair</param>
        </member>
        <member name="T:RichTextKit.Bidi.BracketPair">
            <summary>
            Hold the start and end index of a pair of brackets
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi.BracketPair.OpeningIndex">
            <summary>
            Index of the opening bracket
            </summary>
        </member>
        <member name="F:RichTextKit.Bidi.BracketPair.ClosingIndex">
            <summary>
            Index of the closing bracket
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.BracketPair.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new paired bracket
            </summary>
            <param name="openingIndex">Index of the opening bracket</param>
            <param name="closingIndex">Index of the closing bracket</param>
        </member>
        <member name="M:RichTextKit.Bidi.ResetWhitespaceLevels">
            <summary>
            Resets whitespace levels. Implements rule L1
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.AssignLevelsToCodePointsRemovedByX9">
            <summary>
            Assign levels to any characters that would be have been
            removed by rule X9.  The idea is to keep level runs together 
            that would otherwise be broken by an interfering isolate/embedding
            control character.
            </summary>
        </member>
        <member name="M:RichTextKit.Bidi.IsWhitespace(RichTextKit.Directionality)">
            <summary>
            Check if a directionality type represents whitepsace
            </summary>
            <param name="biditype"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextKit.Bidi.DirectionFromLevel(System.Int32)">
            <summary>
            Convert a level to a direction where odd is RTL and
            even is LTR
            </summary>
            <param name="level">The level to convert</param>
            <returns>A directionality</returns>
        </member>
        <member name="M:RichTextKit.Bidi.IsRemovedByX9(RichTextKit.Directionality)">
            <summary>
            Helper to check if a directionality is removed by rule X9
            </summary>
            <param name="biditype">The bidi type to check</param>
            <returns>True if rule X9 would remove this character; otherwise false</returns>
        </member>
        <member name="M:RichTextKit.Bidi.IsNeutralType(RichTextKit.Directionality)">
            <summary>
            Check if a a directionality is neutral for rules N1 and N2
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextKit.Bidi.GetStrongTypeN0(RichTextKit.Directionality)">
            <summary>
            Maps a direction to a strong type for rule N0
            </summary>
            <param name="dir">The direction to map</param>
            <returns>A strong direction - R, L or ON</returns>
        </member>
        <member name="T:RichTextKit.BidiData">
            <summary>
            Represents a unicode string and all associated attributes
            for each character required for the Bidi algorithm
            </summary>
        </member>
        <member name="M:RichTextKit.BidiData.#ctor">
            <summary>
            Construct a new empty BidiData
            </summary>
        </member>
        <member name="M:RichTextKit.BidiData.Init(RichTextKit.Utils.Slice{System.Int32},System.SByte)">
            <summary>
            Initialize with an array of Unicode code points
            </summary>
            <param name="codePoints">The unicode code points to be processed</param>
            <param name="paragraphEmbeddingLevel">The paragraph embedding level</param>
        </member>
        <member name="M:RichTextKit.BidiData.MapCanon(System.Int32)">
            <summary>
            Map bracket types 0x3008 and 0x3009 to their canonical equivalents
            </summary>
            <param name="codePoint">The code point to be mapped</param>
            <returns>The mapped canonical code point, or the passed code point</returns>
        </member>
        <member name="P:RichTextKit.BidiData.Length">
            <summary>
            Get the length of the data held by the BidiData
            </summary>
        </member>
        <member name="M:RichTextKit.BidiData.SaveTypes">
            <summary>
            Save the Types and PairedBracketTypes of this bididata 
            </summary>
            <remarks>
            This is used when processing embedded style runs with 
            directionality overrides.  TextBlock saves the data,
            overrides the style runs to neutral, processes the bidi
            data for the entire paragraph and then restores this data
            before processing the embedded runs.
            </remarks>
        </member>
        <member name="M:RichTextKit.BidiData.RestoreTypes">
            <summary>
            Restore the data saved by SaveTypes
            </summary>
        </member>
        <member name="F:RichTextKit.BidiData.Types">
            <summary>
            The directionality of each code point
            </summary>
        </member>
        <member name="F:RichTextKit.BidiData.PairedBracketTypes">
            <summary>
            The paired bracket type for each code point
            </summary>
        </member>
        <member name="F:RichTextKit.BidiData.PairedBracketValues">
            <summary>
            The paired bracket value for code code point
            </summary>
            <remarks>
            The paired bracket values are the code points
            of each character where the opening code point
            is replaced with the closing code point for easier
            matching.  Also, bracket code points are mapped
            to their canonical equivalents
            </remarks>
        </member>
        <member name="M:RichTextKit.BidiData.GetTempLevelBuffer(System.Int32)">
            <summary>
            Gets a temporary level buffer.  Used by TextBlock when
            resolving style runs with different directionality.
            </summary>
            <param name="length">Length of the required buffer</param>
            <returns>An uninitialized level buffer</returns>
        </member>
        <member name="T:RichTextKit.CaretInfo">
            <summary>
            Used to return caret positioning information from the 
            <see cref="M:RichTextKit.TextBlock.GetCaretInfo(RichTextKit.CaretPosition)"/> method.
            </summary>
        </member>
        <member name="F:RichTextKit.CaretInfo.CodePointIndex">
            <summary>
            Returns the index of the code point that this caret info refers to.
            </summary>
        </member>
        <member name="F:RichTextKit.CaretInfo.LineIndex">
            <summary>
            Returns the line number that contains the caret
            </summary>
        </member>
        <member name="F:RichTextKit.CaretInfo.CaretXCoord">
            <summary>
            The X-coordinate where the caret should be displayed for this code point.
            </summary>
        </member>
        <member name="F:RichTextKit.CaretInfo.CaretRectangle">
            <summary>
            A rectangle describing where the caret should be drawn, relative to the top-left
            corner of the text block. The caret should be drawn from the returned rectangle's
            top-right to bottom-left.
            </summary>
            <remarks>
            This will be based on the *previous* character on this line (or the same character 
            if this is first character in the line). 
            
            Usually this will be a zero-width rectangle describing the x, top and bottom 
            coordinates of where the caret should be drawn.  The width of the drawn caret
            isn't provided and should be determined by the client.
            
            When the caret is immediately following an italic character, the returned
            rectangle will be sloped to the right and should be drawn from the top-right
            coordinate to the bottom-left coordinate.  
            
            If you don't want to draw a sloped caret for italics, use the top and bottom 
            coordinates of the returned rectangle and get the x-coordinate from the 
            <see cref="F:RichTextKit.CaretInfo.CaretXCoord"/> property.
            </remarks>
        </member>
        <member name="P:RichTextKit.CaretInfo.IsNone">
            <summary>
            Checks if this caret info represents a caret position of none, or not found
            </summary>
        </member>
        <member name="F:RichTextKit.CaretInfo.None">
            <summary>
            Place holder caret info structure for no caret
            </summary>
        </member>
        <member name="T:RichTextKit.CaretPosition">
            <summary>
            Stores state information about a caret position
            </summary>
            <remarks>
            The caret position is defined primarily by it's code point
            index however there are other attributes that can affect
            where it's displayed and how it moves.  This structure
            encapsulates all the information about the caret required
            to position and move it correctly.
            </remarks>
        </member>
        <member name="M:RichTextKit.CaretPosition.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a CaretPosition
            </summary>
            <param name="codePointIndex">The code point index of the caret</param>
            <param name="altPosition">Whether the caret should be displayed in its alternative position</param>
        </member>
        <member name="F:RichTextKit.CaretPosition.CodePointIndex">
            <summary>
            The code point index of the caret insertion point
            </summary>
        </member>
        <member name="F:RichTextKit.CaretPosition.AltPosition">
            <summary>
            True to display the caret at the end of the previous line
            rather than the start of the following line when the code
            point index is exactly on a line break.
            </summary>
        </member>
        <member name="T:RichTextKit.Editor.DocumentChangeInfo">
            <summary>
            Provides information about the range of changes to a document
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.DocumentChangeInfo.CodePointIndex">
            <summary>
            The index of the code point index at which the change was made
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.DocumentChangeInfo.OldLength">
            <summary>
            Length of the text that was replaced
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.DocumentChangeInfo.NewLength">
            <summary>
            Length of the replacement text
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.DocumentChangeInfo.IsUndoing">
            <summary>
            True if the current edit operation is the result of an
            undo operation.
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.DocumentChangeInfo.Semantics">
            <summary>
            Semantics of the edit operation
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.DocumentChangeInfo.ImeCaretOffset">
            <summary>
            Offset of the IME caret from the code point index
            </summary>
        </member>
        <member name="T:RichTextKit.Editor.EditSemantics">
            <summary>
            Defines various semantics for TextDocument edit operations
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.EditSemantics.None">
            <summary>
            No special behaviour
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.EditSemantics.Backspace">
            <summary>
            Special behaviour for backspacing over one character
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.EditSemantics.ForwardDelete">
            <summary>
            Special behaviour for forward deleting text one character
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.EditSemantics.Typing">
            <summary>
            Special behaviour typing text one character at time
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.EditSemantics.Overtype">
            <summary>
            Special behaviour for overtyping existing text
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.EditSemantics.ImeComposition">
            <summary>
            Special behaviour for displaying the composition string of an IME
            </summary>
        </member>
        <member name="T:RichTextKit.Editor.ITextDocumentView">
            <summary>
            Interface implemented by views of a TextDocument
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.ITextDocumentView.OnReset">
            <summary>
            Notifies that the view needs to be reset, typically because
            the entire content has been reloaded or updated
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.ITextDocumentView.OnRedraw">
            <summary>
            Notifies that something other than the content of the document
            has changed (eg: margins) and the view needs to be redrawn but 
            the same selection can be maintained
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.ITextDocumentView.OnDocumentWillChange(RichTextKit.Editor.ITextDocumentView)">
            <summary>
            Notifies that the document is about to change
            </summary>
            <param name="view">The view initiating the change</param>
        </member>
        <member name="M:RichTextKit.Editor.ITextDocumentView.OnDocumentChange(RichTextKit.Editor.ITextDocumentView,RichTextKit.Editor.DocumentChangeInfo)">
            <summary>
            Notifies a view that the document has changed and provides
            information about which parts of the document were changed.
            </summary>
            <param name="view">The view initiating the change</param>
            <param name="info">Information about the change</param>
        </member>
        <member name="M:RichTextKit.Editor.ITextDocumentView.OnDocumentDidChange(RichTextKit.Editor.ITextDocumentView)">
            <summary>
            Notifies that the document has finished changing
            </summary>
            <param name="view">The view initiating the change</param>
        </member>
        <member name="T:RichTextKit.Editor.NavigationKind">
            <summary>
            Defines a kind of keyboard navigation
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.None">
            <summary>
            No movement
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.CharacterLeft">
            <summary>
            Move one character to the left
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.CharacterRight">
            <summary>
            Move one character to the right
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.LineUp">
            <summary>
            Move up one line
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.LineDown">
            <summary>
            Move down one line
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.WordLeft">
            <summary>
            Move left one word
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.WordRight">
            <summary>
            Move right one word
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.PageUp">
            <summary>
            Move up one page
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.PageDown">
            <summary>
            Move down one page
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.LineHome">
            <summary>
            Move to the start of the line
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.LineEnd">
            <summary>
            Move to the end of the line
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.DocumentHome">
            <summary>
            Move to the top of the document
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.NavigationKind.DocumentEnd">
            <summary>
            Move to the end of the document
            </summary>
        </member>
        <member name="T:RichTextKit.Editor.Paragraph">
            <summary>
            Abstract base class for all TextDocument paragraphs
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.Paragraph.#ctor">
            <summary>
            Constructs a new Paragraph
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.Paragraph.Layout(RichTextKit.Editor.TextDocument)">
            <summary>
            Layout the content of this paragraph
            </summary>
            <param name="owner">The TextDocument that owns this paragraph</param>
        </member>
        <member name="M:RichTextKit.Editor.Paragraph.Paint(SkiaSharp.SKCanvas,RichTextKit.TextPaintOptions)">
            <summary>
            Paint this paragraph
            </summary>
            <param name="canvas">The canvas to paint to</param>
            <param name="options">Paint options</param>
        </member>
        <member name="M:RichTextKit.Editor.Paragraph.GetCaretInfo(RichTextKit.CaretPosition)">
            <summary>
            Get caret position information
            </summary>
            <remarks>
            The returned caret info should be relative to the paragraph's content
            </remarks>
            <param name="position">The caret position</param>
            <returns>A CaretInfo struct, or CaretInfo.None</returns>
        </member>
        <member name="M:RichTextKit.Editor.Paragraph.HitTest(System.Single,System.Single)">
            <summary>
            Hit test this paragraph
            </summary>
            <param name="x">The x-coordinate relative to top left of the paragraph content</param>
            <param name="y">The x-coordinate relative to top left of the paragraph content</param>
            <returns>A HitTestResult</returns>
        </member>
        <member name="M:RichTextKit.Editor.Paragraph.HitTestLine(System.Int32,System.Single)">
            <summary>
            Hit test a line in this paragraph
            </summary>
            <remarks>
            The number of lines can be determined from LineIndicies.Count.
            </remarks>
            <param name="lineIndex">The line number to be tested</param>
            <param name="x">The x-coordinate relative to left of the paragraph content</param>
            <returns>A HitTestResult</returns>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.CaretIndicies">
            <summary>
            Retrieves a list of all valid caret positions
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.WordBoundaryIndicies">
            <summary>
            Retrieves a list of all valid word boundary caret positions
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.LineIndicies">
            <summary>
            Retrieves a list of code point indicies of the start of each line
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.Length">
            <summary>
            Gets the length of this paragraph in code points
            </summary>
            <remarks>
            All paragraphs must have a non-zero length and text paragraphs
            should include the end of paragraph marker in the length.
            </remarks>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.ContentHeight">
            <summary>
            Qureries the height of this paragraph, excluding margins
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.ContentWidth">
            <summary>
            Queries the width of this paragraph, excluding margins
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.TextBlock">
            <summary>
            Gets the TextBlock associated with this paragraph
            </summary>
            <remarks>
            Non-text paragraphs should return null
            </remarks>
        </member>
        <member name="M:RichTextKit.Editor.Paragraph.CopyStyleFrom(RichTextKit.Editor.Paragraph)">
            <summary>
            Copy all style attributes from this paragraph to another
            </summary>
            <param name="other">The paragraph to copy style from</param>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.ContentXCoord">
            <summary>
            The X-coordinate of this paragraph's content (ie: after applying margin)
            </summary>
            <remarks>
            This property is calculated and assigned by the TextDocument
            </remarks>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.ContentYCoord">
            <summary>
            The Y-coordinate of this paragraph's content (ie: after applying margin)
            </summary>
            <remarks>
            This property is calculated and assigned by the TextDocument
            </remarks>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.CodePointIndex">
            <summary>
            This code point index of this paragraph relative to the start
            of the document.
            </summary>
            <remarks>
            This property is calculated and assigned by the TextDocument
            </remarks>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.MarginLeft">
            <summary>
            The left margin
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.MarginRight">
            <summary>
            The right margin
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.MarginTop">
            <summary>
            The top margin
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.Paragraph.MarginBottom">
            <summary>
            The bottom margin
            </summary>
        </member>
        <member name="T:RichTextKit.Editor.SelectionKind">
            <summary>
            Defines a kind of selection range
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.SelectionKind.None">
            <summary>
            No range
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.SelectionKind.Word">
            <summary>
            Select a word
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.SelectionKind.Line">
            <summary>
            Select a line
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.SelectionKind.Paragraph">
            <summary>
            Select a paragraph
            </summary>
        </member>
        <member name="F:RichTextKit.Editor.SelectionKind.Document">
            <summary>
            Select the entire document (ie: select all)
            </summary>
        </member>
        <member name="T:RichTextKit.Editor.TextDocument">
            <summary>
            Represents a the document part of a Document/View editor
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.#ctor">
            <summary>
            Constructs a new TextDocument
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the document margins
            </summary>
            <remarks>
            This operation resets the undo manager
            </remarks>
            <param name="left">The left margin</param>
            <param name="top">The top margin</param>
            <param name="right">The right margin</param>
            <param name="bottom">The bottom margin</param>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.SingleLineMode">
            <summary>
            Specifies if the document is in single line mode 
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.PlainTextMode">
            <summary>
            Specifies if the document is in plain text mode
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.DefaultAlignment">
            <summary>
            Gets the default alignment for paragraphs in this document
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.DefaultStyle">
            <summary>
            Specifies the style to be used in plain text mode
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.Text">
            <summary>
            Get/set the entire document text
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.RegisterView(RichTextKit.Editor.ITextDocumentView)">
            <summary>
            Registers a new view to receive notifications of changes to the document
            </summary>
            <param name="view">The view to be registered</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.RevokeView(RichTextKit.Editor.ITextDocumentView)">
            <summary>
            Revokes a previously registered view
            </summary>
            <param name="view">The view to revoke</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.Paint(SkiaSharp.SKCanvas,System.Single,System.Single,RichTextKit.TextPaintOptions)">
            <summary>
            Paint this text block
            </summary>
            <param name="canvas">The Skia canvas to paint to</param>
            <param name="fromYCoord">The top Y-Coord of the visible part of the document</param>
            <param name="toYCoord">The bottom Y-Coord of the visible part of the document</param>
            <param name="options">Options controlling the paint operation</param>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.LineWrap">
            <summary>
            Indicates if text should be wrapped
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.PageWidth">
            <summary>
            Specifies the page width of the document
            </summary>
            <remarks>
            This value is ignored for single line editor
            </remarks>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.MarginLeft">
            <summary>
            The document's left margin
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.MarginRight">
            <summary>
            The document's right margin
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.MarginTop">
            <summary>
            The document's top margin
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.MarginBottom">
            <summary>
            The document's bottom margin
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.MeasuredHeight">
            <summary>
            The total height of the document
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.MeasuredWidth">
            <summary>
            The total width of the document
            </summary>
            <remarks>
            For line-wrap documents this is the page width.
            For non-line-wrap documents this is the width of the widest paragraph.
            </remarks>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.MeasuredContentWidth">
            <summary>
            The total width of the content of the document
            </summary>
            <remarks>
            For line-wrap or non-line-wrap documents this is
            the width of the widest paragraph.
            </remarks>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.MeasuredOverhang">
            <summary>
            Gets the actual measured overhang in each direction based on the 
            fonts used, and the supplied text.
            </summary>
            <remarks>
            The return rectangle describes overhang amounts for each edge - not 
            rectangle co-ordinates.
            </remarks>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.Length">
            <summary>
            Gets the total length of the document in code points
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.HitTest(System.Single,System.Single)">
            <summary>
            Hit test this string
            </summary>
            <param name="x">The x-coordinate relative to top-left of the document</param>
            <param name="y">The y-coordinate relative to top-left of the document</param>
            <returns>A HitTestResult</returns>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.GetCaretInfo(RichTextKit.CaretPosition)">
            <summary>
            Calculates useful information for displaying a caret
            </summary>
            <param name="position">The caret position</param>
            <returns>A CaretInfo struct, or CaretInfo.None</returns>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.GetStyleAtOffset(System.Int32)">
            <summary>
            Get the style of the text at a specified code point index
            </summary>
            <param name="offset">The offset of the code point</param>
            <returns>An IStyle</returns>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.Extract(RichTextKit.TextRange)">
            <summary>
            Get the text for a part of the document
            </summary>
            <param name="range">The text to retrieve</param>
            <returns>The styled text</returns>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.Navigate(RichTextKit.CaretPosition,RichTextKit.Editor.NavigationKind,System.Single,System.Nullable{System.Single}@)">
            <summary>
            Handles keyboard navigation events
            </summary>
            <param name="position">The current caret position</param>
            <param name="kind">The direction and type of caret movement</param>
            <param name="pageSize">Specifies the page size for page up/down navigation</param>
            <param name="ghostXCoord">Transient storage for XCoord of caret during vertical navigation</param>
            <returns>The new caret position</returns>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.GetSelectionRange(RichTextKit.CaretPosition,RichTextKit.Editor.SelectionKind)">
            <summary>
            Given a caret position, find an enclosing selection range for the
            current word, line, paragraph or document
            </summary>
            <param name="position">The caret position to select from</param>
            <param name="kind">The kind of selection to return</param>
            <returns></returns>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.UndoManager">
            <summary>
            Get the undo manager for this document
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.ReplaceText(RichTextKit.Editor.ITextDocumentView,RichTextKit.TextRange,System.String,RichTextKit.Editor.EditSemantics,RichTextKit.IStyle)">
            <summary>
            Replaces a range of text with the specified text
            </summary>
            <param name="view">The view initiating the operation</param>
            <param name="range">The range to be replaced</param>
            <param name="text">The text to replace with</param>
            <param name="semantics">Controls how undo operations are coalesced and view selections updated</param>"
            <param name="styleToUse">The style to use for the added text (optional)</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.ReplaceText(RichTextKit.Editor.ITextDocumentView,RichTextKit.TextRange,RichTextKit.Utils.Slice{System.Int32},RichTextKit.Editor.EditSemantics,RichTextKit.IStyle)">
            <summary>
            Replaces a range of text with the specified text
            </summary>
            <param name="view">The view initiating the operation</param>
            <param name="range">The range to be replaced</param>
            <param name="codePoints">The text to replace with</param>
            <param name="semantics">Controls how undo operations are coalesced and view selections updated</param>"
            <param name="styleToUse">The style to use for the added text (optional)</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.ReplaceText(RichTextKit.Editor.ITextDocumentView,RichTextKit.TextRange,RichTextKit.StyledText,RichTextKit.Editor.EditSemantics)">
            <summary>
            Replaces a range of text with the specified text
            </summary>
            <param name="view">The view initiating the operation</param>
            <param name="range">The range to be replaced</param>
            <param name="styledText">The text to replace with</param>
            <param name="semantics">Controls how undo operations are coalesced and view selections updated</param>"
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.IsImeComposing">
            <summary>
            Indicates if an IME composition is currently in progress
            </summary>
        </member>
        <member name="P:RichTextKit.Editor.TextDocument.ImeCompositionOffset">
            <summary>
            Get the code point offset position of the current IME composition
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.StartImeComposition(RichTextKit.Editor.ITextDocumentView,RichTextKit.TextRange)">
            <summary>
            Starts and IME composition action
            </summary>
            <param name="view">The initiating view</param>
            <param name="initialSelection">The initial text selection</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.UpdateImeComposition(RichTextKit.Editor.ITextDocumentView,RichTextKit.StyledText,System.Int32)">
            <summary>
            Update a pending IME composition
            </summary>
            <param name="view">The initiating view</param>
            <param name="text">The composition text</param>
            <param name="caretOffset">The caret offset relative to the composition text</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.FinishImeComposition(RichTextKit.Editor.ITextDocumentView)">
            <summary>
            Complete an IME composition
            </summary>
            <param name="view">The initiating view</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.Undo(RichTextKit.Editor.ITextDocumentView)">
            <summary>
            Undo the last editor operation
            </summary>
            <param name="view">The view initiating the undo command</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.Redo(RichTextKit.Editor.ITextDocumentView)">
            <summary>
            Redo the undone edit operations
            </summary>
            <param name="view">The view initiating the redo command</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.GetText(RichTextKit.TextRange)">
            <summary>
            Get the text for a part of the document
            </summary>
            <param name="range">The text to retrieve</param>
            <returns>The text as a Utf32Buffer</returns>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.GetOvertypeRange(RichTextKit.TextRange)">
            <summary>
            Gets the range of text that will be overwritten by overtype mode
            at a particular location in the document
            </summary>
            <param name="range">The current selection range</param>
            <returns>The range that will be replaced by overtyping</returns>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.GetParagraphForCodePointIndex(RichTextKit.CaretPosition,System.Int32@)">
            <summary>
            Given a code point index relative to the document, return which
            paragraph contains that code point and the offset within the paragraph
            </summary>
            <param name="position">The caret position to locate the paragraph for</param>
            <param name="indexInParagraph">Out parameter returning the code point index into the paragraph</param>
            <returns>The index of the paragraph</returns>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.FindClosestParagraph(System.Single)">
            <summary>
            Helper to find the closest paragraph to a y-coordinate 
            </summary>
            <param name="y">Y-Coord to hit test</param>
            <returns>A reference to the closest paragraph</returns>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.InvalidateLayout">
            <summary>
            Mark the document as needing layout update
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.Layout">
            <summary>
            Update the layout of the document
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.FireDocumentReset">
            <summary>
            Notify all attached views that the document has been reset
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.FireDocumentRedraw">
            <summary>
            Notify all attached views that the document has been reset
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.FireDocumentWillChange">
            <summary>
            Notify all attached views that the document is about to change
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.FireDocumentChange(RichTextKit.Editor.DocumentChangeInfo)">
            <summary>
            Notify all attached views that the document has changed
            </summary>
            <param name="info">Info about the changes to the document</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.FireDocumentDidChange">
            <summary>
            Notify all attached views that the document has finished changing
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.ReplaceTextInternal(RichTextKit.Editor.ITextDocumentView,RichTextKit.TextRange,RichTextKit.StyledText,RichTextKit.Editor.EditSemantics,System.Int32)">
            <summary>
            Internal helper to replace text creating an undo unit
            </summary>
            <param name="view">The initiating view</param>
            <param name="range">The range of text to be replaced</param>
            <param name="text">The replacement text</param>
            <param name="semantics">The edit semantics of the change</param>
            <param name="imeCaretOffset">The position of the IME caret relative to the start of the range</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.DeleteInternal(RichTextKit.TextRange)">
            <summary>
            Delete a section of the document
            </summary>
            <remarks>
            Returns the index of the first paragraph affected
            </remarks>
            <param name="range">The range to be deleted</param>
        </member>
        <member name="M:RichTextKit.Editor.TextDocument.InsertInternal(System.Int32,RichTextKit.StyledText)">
            <summary>
            Insert text into the document
            </summary>
            <param name="position">The position to insert the text at</param>
            <param name="text">The text to insert</param>
            <returns>The index of the first paragraph affected</returns>
        </member>
        <member name="F:RichTextKit.Editor.TextDocument._pageWidth">
            Private members
        </member>
        <member name="T:RichTextKit.Editor.TextParagraph">
            <summary>
            Implements a text paragraph
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextParagraph.#ctor(RichTextKit.IStyle)">
            <summary>
            Constructs a new TextParagraph
            </summary>
        </member>
        <member name="M:RichTextKit.Editor.TextParagraph.Layout(RichTextKit.Editor.TextDocument)">
            <inheritdoc />
        </member>
        <member name="M:RichTextKit.Editor.TextParagraph.Paint(SkiaSharp.SKCanvas,RichTextKit.TextPaintOptions)">
            <inheritdoc />
        </member>
        <member name="M:RichTextKit.Editor.TextParagraph.GetCaretInfo(RichTextKit.CaretPosition)">
            <inheritdoc />
        </member>
        <member name="M:RichTextKit.Editor.TextParagraph.HitTest(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:RichTextKit.Editor.TextParagraph.HitTestLine(System.Int32,System.Single)">
            <inheritdoc />
        </member>
        <member name="P:RichTextKit.Editor.TextParagraph.CaretIndicies">
            <inheritdoc />
        </member>
        <member name="P:RichTextKit.Editor.TextParagraph.WordBoundaryIndicies">
            <inheritdoc />
        </member>
        <member name="P:RichTextKit.Editor.TextParagraph.LineIndicies">
            <inheritdoc />
        </member>
        <member name="P:RichTextKit.Editor.TextParagraph.Length">
            <inheritdoc />
        </member>
        <member name="P:RichTextKit.Editor.TextParagraph.ContentWidth">
            <inheritdoc />
        </member>
        <member name="P:RichTextKit.Editor.TextParagraph.ContentHeight">
            <inheritdoc />
        </member>
        <member name="P:RichTextKit.Editor.TextParagraph.TextBlock">
            <inheritdoc />
        </member>
        <member name="M:RichTextKit.Editor.TextParagraph.CopyStyleFrom(RichTextKit.Editor.Paragraph)">
            <inheritdoc />
        </member>
        <member name="M:RichTextKit.DefaultCharacterMatcher.MatchCharacter(System.String,System.Int32,System.Int32,SkiaSharp.SKFontStyleSlant,System.String[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:RichTextKit.FontFallback">
            <summary>
            Helper to split a run of code points based on a particular typeface
            into a series of runs where unsupported code points are mapped to a
            fallback font.
            </summary>
        </member>
        <member name="T:RichTextKit.FontFallback.Run">
            <summary>
            Specified details about a font fallback run
            </summary>
        </member>
        <member name="F:RichTextKit.FontFallback.Run.Start">
            <summary>
            The starting code point index of this run
            </summary>
        </member>
        <member name="F:RichTextKit.FontFallback.Run.Length">
            <summary>
            The length of this run in code points
            </summary>
        </member>
        <member name="F:RichTextKit.FontFallback.Run.Typeface">
            <summary>
            The typeface to be used for this run
            </summary>
        </member>
        <member name="F:RichTextKit.FontFallback.CharacterMatcher">
            <summary>
            Specifies the instance of the character matcher to be used for font fallback
            </summary>
            <remarks>
            This instance is shared by all TextBlock instances and should be thread safe
            if used in a multi-threaded environment.
            </remarks>
        </member>
        <member name="M:RichTextKit.FontFallback.GetFontRuns(RichTextKit.Utils.Slice{System.Int32},SkiaSharp.SKTypeface,System.Char)">
            <summary>
            Splits a sequence of code points into a series of runs with font fallback applied
            </summary>
            <param name="codePoints">The code points</param>
            <param name="typeface">The preferred typeface</param>
            <param name="replacementCharacter">The replacement character to be used for the run</param>
            <returns>A sequence of runs with unsupported code points replaced by a selected font fallback</returns>
        </member>
        <member name="T:RichTextKit.ICharacterMatcher">
            <summary>
            Provides a mechanism to override the default font fallback character matching
            </summary>
            <remarks>
            To override font fallback selection, assign an implementation of this interface
            to the <see cref="F:RichTextKit.FontFallback.CharacterMatcher"/> property.
            </remarks>
        </member>
        <member name="M:RichTextKit.ICharacterMatcher.MatchCharacter(System.String,System.Int32,System.Int32,SkiaSharp.SKFontStyleSlant,System.String[],System.Int32)">
            <summary>
            Provide a fallback typeface for a specified code point index
            </summary>
            <param name="familyName">The family name to use when searching.</param>
            <param name="weight">The font weight to use when searching.</param>
            <param name="width">The font width to use when searching.</param>
            <param name="slant">The font slant to use when searching.</param>
            <param name="bcp47">The ISO 639, 15924, and 3166-1 code to use when searching, such as "ja" and "zh".</param>
            <param name="character">The character to find a typeface for.</param>
            <returns>Returns the SkiaSharp.SKTypeface that contains the given character, or null if none was found.</returns>
        </member>
        <member name="T:RichTextKit.FontMapper">
            <summary>
            The FontMapper class is responsible for mapping style typeface information
            to an SKTypeface.
            </summary>
        </member>
        <member name="M:RichTextKit.FontMapper.#ctor">
            <summary>
            Constructs a new FontMapper instnace
            </summary>
        </member>
        <member name="M:RichTextKit.FontMapper.TypefaceFromStyle(RichTextKit.IStyle,System.Boolean)">
            <summary>
            Maps a given style to a specific typeface
            </summary>
            <param name="style">The style to be mapped</param>
            <param name="ignoreFontVariants">Indicates the mapping should ignore font variants (use to get font for ellipsis)</param>
            <returns>A mapped typeface</returns>
        </member>
        <member name="F:RichTextKit.FontMapper.Default">
            <summary>
            The default font mapper instance.  
            </summary>
            <remarks>
            The default font mapper is used by any TextBlocks that don't 
            have an explicit font mapper set (see the <see cref="P:RichTextKit.TextBlock.FontMapper"/> property).
            
            Replacing the default font mapper allows changing the font mapping
            for all text blocks that don't have an explicit mapper assigned.
            </remarks>
        </member>
        <member name="T:RichTextKit.FontRun">
            <summary>
            Represents a font run - a physical sequence of laid glyphs all with
            the same font and style attributes.
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.RunKind">
            <summary>
            The kind of font run.
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.StyleRun">
            <summary>
            The style run this typeface run was derived from.
            </summary>
        </member>
        <member name="P:RichTextKit.FontRun.CodePoints">
            <summary>
            Get the code points of this run
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.Start">
            <summary>
            Code point index of the start of this run
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.Length">
            <summary>
            The length of this run in codepoints
            </summary>
        </member>
        <member name="P:RichTextKit.FontRun.End">
            <summary>
            The index of the first character after this run
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.Style">
            <summary>
            The user supplied style for this run
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.Direction">
            <summary>
            The direction of this run
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.Typeface">
            <summary>
            The typeface of this run (use this over Style.Fontface)
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.Glyphs">
            <summary>
            The glyph indicies
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.GlyphPositions">
            <summary>
            The glyph positions (relative to the entire text block)
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.Clusters">
            <summary>
            The cluster numbers for each glyph
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.RelativeCodePointXCoords">
            <summary>
            The x-coords of each code point, relative to this text run
            </summary>
        </member>
        <member name="M:RichTextKit.FontRun.GetXCoordOfCodePointIndex(System.Int32)">
            <summary>
            Get the x-coord of a code point
            </summary>
            <remarks>
            For LTR runs this will be the x-coordinate to the left, or RTL
            runs it will be the x-coordinate to the right.
            </remarks>
            <param name="codePointIndex">The code point index (relative to the entire text block)</param>
            <returns>The x-coord relative to the entire text block</returns>
        </member>
        <member name="F:RichTextKit.FontRun.Ascent">
            <summary>
            The ascent of the font used in this run
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.Descent">
            <summary>
            The descent of the font used in this run
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.Leading">
            <summary>
            The leading of the font used in this run
            </summary>
        </member>
        <member name="P:RichTextKit.FontRun.TextHeight">
            <summary>
            The height of text in this run (ascent + descent)
            </summary>
        </member>
        <member name="P:RichTextKit.FontRun.HalfLeading">
            <summary>
            Calculate the half leading height for text in this run
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.Width">
            <summary>
            Width of this typeface run
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun.XCoord">
            <summary>
            Horizontal position of this run, relative to the left margin
            </summary>
        </member>
        <member name="P:RichTextKit.FontRun.Line">
            <summary>
            The line that owns this font run 
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun._paint">
            <summary>
            cached SKPaint
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun._paintHalo">
            <summary>
            cached SKPaint
            </summary>
        </member>
        <member name="F:RichTextKit.FontRun._paintBackground">
            <summary>
            cached SKPaint
            </summary>
        </member>
        <member name="P:RichTextKit.FontRun.NextRun">
            <summary>
            Get the next font run from this one
            </summary>
        </member>
        <member name="P:RichTextKit.FontRun.PreviousRun">
            <summary>
            Get the previous font run from this one
            </summary>
        </member>
        <member name="M:RichTextKit.FontRun.ToString">
            <summary>
            For debugging
            </summary>
            <returns>Debug string</returns>
        </member>
        <member name="M:RichTextKit.FontRun.MoveGlyphs(System.Single,System.Single)">
            <summary>
            Moves all glyphs by the specified offset amount
            </summary>
            <param name="dx">The x-delta to move glyphs by</param>
            <param name="dy">The y-delta to move glyphs by</param>
        </member>
        <member name="M:RichTextKit.FontRun.LeadingWidth(System.Int32)">
            <summary>
            Calculates the leading width of all character from the start of the run (either 
            the left or right depending on run direction) to the specified code point
            </summary>
            <param name="codePoint">The code point index to measure to</param>
            <returns>The distance from the start to the specified code point</returns>
        </member>
        <member name="M:RichTextKit.FontRun.FindBreakPosition(System.Single,System.Boolean)">
            <summary>
            Calculate the position at which to break a text run
            </summary>
            <param name="maxWidth">The max width available</param>
            <param name="force">Whether to force the use of at least one glyph</param>
            <returns>The code point position to break at</returns>
        </member>
        <member name="M:RichTextKit.FontRun.Split(System.Int32)">
            <summary>
            Split a typeface run into two separate runs, truncating this run at 
            the specified code point index and returning a new run containing the
            split off part.
            </summary>
            <param name="splitAtCodePoint">The code point index to split at</param>
            <returns>A new typeface run for the split off part</returns>
        </member>
        <member name="M:RichTextKit.FontRun.SplitLTR(System.Int32)">
            <summary>
            Split a LTR typeface run into two separate runs, truncating the passed
            run (LHS) and returning a new run containing the split off part (RHS)
            </summary>
            <param name="splitAtCodePoint">To code point position to split at</param>
            <returns>The RHS run after splitting</returns>
        </member>
        <member name="M:RichTextKit.FontRun.SplitRTL(System.Int32)">
            <summary>
            Split a RTL typeface run into two separate runs, truncating the passed
            run (RHS) and returning a new run containing the split off part (LHS)
            </summary>
            <param name="splitAtCodePoint">To code point position to split at</param>
            <returns>The LHS run after splitting</returns>
        </member>
        <member name="F:RichTextKit.FontRun.CodePointBuffer">
            <summary>
            The global list of code points
            </summary>
        </member>
        <member name="M:RichTextKit.FontRun.UpdateOverhang(System.Single,System.Boolean,System.Boolean,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Calculate any overhang for this text line
            </summary>
            <param name="right"></param>
            <param name="updateTop">True to update topOverhang.</param>
            <param name="updateBottom">True to update bottomOverhang.</param>
            <param name="leftOverhang"></param>
            <param name="rightOverhang"></param>
            <param name="topOverhang"></param>
            <param name="bottomOverhang"></param>
        </member>
        <member name="M:RichTextKit.FontRun.Paint(RichTextKit.PaintTextContext,System.Single)">
            <summary>
            Paint this font run
            </summary>
            <param name="ctx"></param>
            <param name="alpha"> transparency</param>
        </member>
        <member name="M:RichTextKit.FontRun.PaintBackground(RichTextKit.PaintTextContext,System.Single)">
            <summary>
            Paint background of this font run
            </summary>
            <param name="ctx"></param>
            <param name="alpha"> the opacity</param>
        </member>
        <member name="T:RichTextKit.FontRunKind">
            <summary>
            Indicates the kind of font run.
            </summary>
        </member>
        <member name="F:RichTextKit.FontRunKind.Normal">
            <summary>
            This is a normal text font run.
            </summary>
        </member>
        <member name="F:RichTextKit.FontRunKind.TrailingWhitespace">
            <summary>
            This font run covers the trailing white space on a line.
            </summary>
        </member>
        <member name="F:RichTextKit.FontRunKind.Ellipsis">
            <summary>
            This is a special font run created for the truncation ellipsis.
            </summary>
        </member>
        <member name="T:RichTextKit.FontVariant">
            <summary>
            Describes variations to a base font for a run of text.
            </summary>
        </member>
        <member name="F:RichTextKit.FontVariant.Normal">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:RichTextKit.FontVariant.SuperScript">
            <summary>
            Super-script Text
            </summary>
        </member>
        <member name="F:RichTextKit.FontVariant.SubScript">
            <summary>
            Sub-script Text
            </summary>
        </member>
        <member name="M:RichTextKit.GraphemeClusterAlgorithm.GetBoundaries(RichTextKit.Utils.Slice{System.Int32})">
            <summary>
            Given a sequence of code points, return its grapheme cluster boundaries
            </summary>
            <param name="codePoints">The code points</param>
            <returns>An enumerable of grapheme cluster boundaries</returns>
        </member>
        <member name="M:RichTextKit.GraphemeClusterAlgorithm.IsBoundary(RichTextKit.Utils.Slice{System.Int32},System.Int32)">
            <summary>
            Check if a position in a code point buffer is a grapheme cluster boundary
            </summary>
            <param name="codePoints">The code points</param>
            <param name="position">The position to check</param>
            <returns></returns>
        </member>
        <member name="T:RichTextKit.HitTestResult">
            <summary>
            Used to return hit test information from the
            <see cref="M:RichTextKit.TextBlock.HitTest(System.Single,System.Single)"/> method.
            </summary>
        </member>
        <member name="F:RichTextKit.HitTestResult.OverLine">
            <summary>
            The zero based index of the line number the y-coordinate is directly 
            over, or -1 if the y-coordinate is before the first line, or after the 
            last line.
            </summary>
            <remarks>
            The x-coordinate isn't used in calculating this value and the left/right 
            limits aren't checked.
            </remarks>
        </member>
        <member name="F:RichTextKit.HitTestResult.ClosestLine">
            <summary>
            The zero based index of the closest line to the passed y-coordinate.  
            </summary>
            <remarks>
            If the point is directly over a line this value will be the same as the 
            <see cref="F:RichTextKit.HitTestResult.OverLine"/> property.  If the point is before the first line, 
            this property will be 0.  If the point is after the last line this value 
            will be the index of the last line. 
            </remarks>
        </member>
        <member name="F:RichTextKit.HitTestResult.OverCodePointIndex">
            <summary>
            The code point index of the first code point in the cluster that the 
            point is actually over, or -1 if not over a cluster.
            </summary>
        </member>
        <member name="F:RichTextKit.HitTestResult.ClosestCodePointIndex">
            <summary>
            The code point index of the first code point in the cluster that the
            point is closest to.
            </summary>
            <remarks>
            If the point is over a cluster, the returned code point index will vary
            depending whether the point is in the left or right half of the cluster
            and the text direction of that cluster.
            
            This value represents the code point index that the caret should be moved to 
            if the user clicked the mouse at this position.  To determine the co-ordinates
            and shape of the caret, see [Caret Information](/caret).
            </remarks>
        </member>
        <member name="F:RichTextKit.HitTestResult.AltCaretPosition">
            <summary>
            Indicates that the point is closest to the alternate caret position
            of ClosestCodePointIndex.
            </summary>
            <remarks>
            This property indicates if the tested point is beyond the end of
            a word wrapped line and not at the start of the following line.
            </remarks>
        </member>
        <member name="P:RichTextKit.HitTestResult.CaretPosition">
            <summary>
            Helper to get the closest position as a CaretPosition
            </summary>
        </member>
        <member name="M:RichTextKit.HitTestResult.Equals(System.Object)">
            <summary>
            Compares this object to another instance
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextKit.HitTestResult.GetHashCode">
            <summary>
            Gets a hash code for this object
            </summary>
            <returns>The hash value</returns>
        </member>
        <member name="P:RichTextKit.HitTestResult.IsNone">
            <summary>
            Check is this is the "none" hit test result
            </summary>
        </member>
        <member name="F:RichTextKit.HitTestResult.None">
            <summary>
            Hit test result indicating no hit, or untested hit
            </summary>
        </member>
        <member name="T:RichTextKit.IStyle">
            <summary>
            Provides styling information for a run of text.
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.FontFamily">
            <summary>
            The font family for text this text run.
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.FontSize">
            <summary>
            The font size for text in this run.
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.FontWeight">
            <summary>
            The font weight for text in this run.
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.FontWidth">
            <summary>
            The font weight for text in this run.
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.FontItalic">
            <summary>
            True if the text in this run should be displayed in an italic
            font; otherwise False.
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.Underline">
            <summary>
            The underline style for text in this run.
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.StrikeThrough">
            <summary>
            The strike through style for the text in this run
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.LineHeight">
            <summary>
            The line height for text in this run as a multiplier (defaults to 1)
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.TextColor">
            <summary>
            The text color for text in this run.
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.BackgroundColor">
            <summary>
            The background color of this run.
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.HaloColor">
            <summary>
            Color of the halo
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.HaloWidth">
            <summary>
            Width of halo
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.HaloBlur">
            <summary>
            Blur of halo
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.LetterSpacing">
            <summary>
            Extra spacing between each character
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.FontVariant">
            <summary>
            The font variant (ie: super/sub-script) for text in this run.
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.TextDirection">
            <summary>
            Text direction override for this span
            </summary>
        </member>
        <member name="P:RichTextKit.IStyle.ReplacementCharacter">
            <summary>
            Specifies a replacement character to be displayed (password mode)
            </summary>
        </member>
        <member name="T:RichTextKit.IStyleExtensions">
            <summary>
            Extension methods for working with IStyle
            </summary>
        </member>
        <member name="M:RichTextKit.IStyleExtensions.Key(RichTextKit.IStyle)">
            <summary>
            Generates a string key that uniquely identifies the formatting characteristics
            of this style.
            </summary>
            <remarks>
            Two styles with the same Key will rendering identically even if different instances.
            </remarks>
            <param name="This">The style instance to generate the key for</param>
            <returns>A key string</returns>
        </member>
        <member name="M:RichTextKit.IStyleExtensions.HasSameLayout(RichTextKit.IStyle,RichTextKit.IStyle)">
            <summary>
            Compares this style to another and returns true if both will have the same
            layout, but not necessarily the same appearance (eg: color change, underline etc...)
            </summary>
            <param name="This">The style instance</param>
            <param name="other">The other style instance to compare to</param>
            <returns>True if both styles will give the same layout</returns>
        </member>
        <member name="M:RichTextKit.IStyleExtensions.IsSame(RichTextKit.IStyle,RichTextKit.IStyle)">
            <summary>
            Compares this style to another and returns true if both will have the same
            layout, but not necessarily the same appearance (eg: color change, underline etc...)
            </summary>
            <param name="This">The style instance</param>
            <param name="other">The other style instance to compare to</param>
            <returns>True if both styles will give the same layout</returns>
        </member>
        <member name="T:RichTextKit.LineBreak">
            <summary>
            Information about a potential line break position
            </summary>
        </member>
        <member name="M:RichTextKit.LineBreak.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="positionMeasure">The code point index to measure to</param>
            <param name="positionWrap">The code point index to actually break the line at</param>
            <param name="required">True if this is a required line break; otherwise false</param>
        </member>
        <member name="F:RichTextKit.LineBreak.PositionMeasure">
            <summary>
            The break position, before any trailing whitespace
            </summary>
            <remarks>
            This doesn't include trailing whitespace
            </remarks>
        </member>
        <member name="F:RichTextKit.LineBreak.PositionWrap">
            <summary>
            The break position, after any trailing whitespace
            </summary>
            <remarks>
            This includes trailing whitespace
            </remarks>
        </member>
        <member name="F:RichTextKit.LineBreak.Required">
            <summary>
            True if there should be a forced line break here
            </summary>
        </member>
        <member name="T:RichTextKit.LineBreaker">
            <summary>
            Implementation of the Unicode Line Break Algorithm
            </summary>
        </member>
        <member name="M:RichTextKit.LineBreaker.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RichTextKit.LineBreaker.Reset(System.String)">
            <summary>
            Reset this line breaker
            </summary>
            <param name="str">The string to be broken</param>
        </member>
        <member name="M:RichTextKit.LineBreaker.Reset(RichTextKit.Utils.Slice{System.Int32})">
            <summary>
            Reset this line breaker
            </summary>
            <param name="codePoints">The code points of the string to be broken</param>
        </member>
        <member name="M:RichTextKit.LineBreaker.GetBreaks(System.Boolean)">
            <summary>
            Enumerate all line breaks
            </summary>
            <returns>A collection of line break positions</returns>
        </member>
        <member name="T:RichTextKit.WordBoundaryAlgorithm">
            <summary>
            Implementation of the word boundary algorithm
            </summary>
        </member>
        <member name="M:RichTextKit.WordBoundaryAlgorithm.FindWordBoundaries(RichTextKit.Utils.Slice{System.Int32})">
            <summary>
            Locate the start of each "word" in a unicode string.  Used for Ctrl+Left/Right
            in editor and different to the line break algorithm.
            </summary>
        </member>
        <member name="M:RichTextKit.WordBoundaryAlgorithm.IsWordBoundary(RichTextKit.Utils.Slice{System.Int32},RichTextKit.Utils.Slice{System.Int32})">
            <summary>
            Check if the characters at the boundary between strings is a word boundary
            </summary>
            <param name="a">The first string</param>
            <param name="b">The second string</param>
            <returns>True if this is a word boundary</returns>
        </member>
        <member name="T:RichTextKit.PaintTextContext">
            <summary>
            Resolved, internal class used to pass paint context info
            </summary>
        </member>
        <member name="T:RichTextKit.RichString">
            <summary>
            Represents a string decorated with rich text information including
            various helper methods for constructing rich text strings with a 
            fluent-like API.
            </summary>
        </member>
        <member name="M:RichTextKit.RichString.#ctor(System.String)">
            <summary>
            Constructs a new rich text string
            </summary>
            <param name="str">An initial piece of text to append to the string</param>
        </member>
        <member name="M:RichTextKit.RichString.Add(System.String)">
            <summary>
            Append text to this RichString
            </summary>
            <param name="text">The text to append</param>
            <returns></returns>
        </member>
        <member name="M:RichTextKit.RichString.Add(System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{SkiaSharp.SKFontStyleWidth},System.Nullable{System.Boolean},System.Nullable{RichTextKit.UnderlineStyle},System.Nullable{RichTextKit.StrikeThroughStyle},System.Nullable{System.Single},System.Nullable{SkiaSharp.SKColor},System.Nullable{SkiaSharp.SKColor},System.Nullable{SkiaSharp.SKColor},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{RichTextKit.FontVariant},System.Nullable{RichTextKit.TextDirection})">
            <summary>
            Adds text with various style attributes changed
            </summary>
            <param name="text">The text to append</param>
            <param name="fontFamily">The new font family</param>
            <param name="fontSize">The new font size</param>
            <param name="fontWeight">The new font weight</param>
            <param name="fontWidth">The new font width</param>
            <param name="fontItalic">The new font italic</param>
            <param name="underline">The new underline style</param>
            <param name="strikeThrough">The new strike-through style</param>
            <param name="lineHeight">The new line height</param>
            <param name="textColor">The new text color</param>
            <param name="backgroundColor">The new background color</param>
            <param name="haloColor">The new halo color</param>
            <param name="haloWidth">The new halo width</param>
            <param name="haloBlur">The new halo blur width</param>
            <param name="letterSpacing">The new character spacing</param>
            <param name="fontVariant">The new font variant</param>
            <param name="textDirection">The new text direction</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.FontFamily(System.String)">
            <summary>
            Changes the font family
            </summary>
            <param name="value">The new font family</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.FontSize(System.Single)">
            <summary>
            Changes the font size
            </summary>
            <param name="value">The new font size</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.FontWeight(System.Int32)">
            <summary>
            Changes the font weight
            </summary>
            <param name="value">The new font weight</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.Bold(System.Boolean)">
            <summary>
            Changes the font weight to bold or normal
            </summary>
            <param name="value">The new font bold setting</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.FontWidth(SkiaSharp.SKFontStyleWidth)">
            <summary>
            Changes the font width
            </summary>
            <param name="value">The new font width</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.FontItalic(System.Boolean)">
            <summary>
            Changes the font italic setting 
            </summary>
            <param name="value">The new font italic setting</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.Underline(RichTextKit.UnderlineStyle)">
            <summary>
            Changes the underline style
            </summary>
            <param name="value">The new underline style</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.StrikeThrough(RichTextKit.StrikeThroughStyle)">
            <summary>
            Changes the strike-through style
            </summary>
            <param name="value">The new strike through style</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.LineHeight(System.Single)">
            <summary>
            Changes the line height
            </summary>
            <param name="value">The new line height</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.TextColor(SkiaSharp.SKColor)">
            <summary>
            Changes the text color
            </summary>
            <param name="value">The new text color</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.BackgroundColor(SkiaSharp.SKColor)">
            <summary>
            Changes the background color
            </summary>
            <param name="value">The new background color</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.HaloColor(SkiaSharp.SKColor)">
            <summary>
            Changes the halo color
            </summary>
            <param name="value">The new halo color</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.HaloWidth(System.Single)">
            <summary>
            Changes the halo width
            </summary>
            <param name="value">The new halo width</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.HaloBlur(System.Single)">
            <summary>
            Changes the halo blur width
            </summary>
            <param name="value">The new halo blur width</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.LetterSpacing(System.Single)">
            <summary>
            Changes the character spacing
            </summary>
            <param name="value">The new character spacing</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.FontVariant(RichTextKit.FontVariant)">
            <summary>
            Changes the font variant
            </summary>
            <param name="value">The new font variant</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.TextDirection(RichTextKit.TextDirection)">
            <summary>
            Changes the text direction
            </summary>
            <param name="value">The new text direction</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.Push">
            <summary>
            Saves the current style to an internal stack
            </summary>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.Normal">
            <summary>
            Resets to normal font (normal weight, italic off, underline off, strike through off, font variant off
            </summary>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.Pop">
            <summary>
            Restores a previous saved style from the internal stack
            </summary>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.Paragraph">
            <summary>
            Starts a new text paragraph
            </summary>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.MarginLeft(System.Single)">
            <summary>
            Sets the left margin of the current paragraph
            </summary>
            <param name="value">The margin width</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.MarginRight(System.Single)">
            <summary>
            Sets the right margin of the current paragraph
            </summary>
            <param name="value">The margin width</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.MarginTop(System.Single)">
            <summary>
            Sets the top margin of the current paragraph
            </summary>
            <param name="value">The margin height</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.MarginBottom(System.Single)">
            <summary>
            Sets the bottom margin of the current paragraph
            </summary>
            <param name="value">The margin height</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.Alignment(RichTextKit.TextAlignment)">
            <summary>
            Sets the text alignment of the current paragraph
            </summary>
            <param name="value">The text alignment</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="M:RichTextKit.RichString.BaseDirection(RichTextKit.TextDirection)">
            <summary>
            Sets the base text direction of the current paragraph
            </summary>
            <param name="value">The base text direction</param>
            <returns>A reference to the same RichString instance</returns>
        </member>
        <member name="P:RichTextKit.RichString.MaxWidth">
            <summary>
            The max width property sets the maximum width of a line, after which 
            the line will be wrapped onto the next line.
            </summary>
            <remarks>
            This property can be set to null, in which case lines won't be wrapped.
            </remarks>
        </member>
        <member name="P:RichTextKit.RichString.MaxHeight">
            <summary>
            The maximum height of the TextBlock after which lines will be 
            truncated and the final line will be appended with an 
            ellipsis (`...`) character.
            </summary>
            <remarks>
            This property can be set to null, in which case the vertical height of the text block
            won't be capped.
            </remarks>
        </member>
        <member name="P:RichTextKit.RichString.SoftHyphenCharacter">
            <summary>
            The Character that is being used as SoftHyphen
            </summary>
            <remarks>
            This property can be set to null, in which case it is set to 173 (the default unicode SoftHyphen)
            </remarks>
        </member>
        <member name="P:RichTextKit.RichString.HyphenCharacter">
            <summary>
            The Character that is being used as Hyphen.
            When Hyphenation should take place, the <see cref="P:RichTextKit.RichString.SoftHyphenCharacter"/> gets replaced with this one
            </summary>
            <remarks>
            This property can be set to null, in which case it is set to 16 (the default Glyphinfo for a Hyphen)
            </remarks>
        </member>
        <member name="P:RichTextKit.RichString.HyphenCharacterWidth">
            <summary>
            The Characters Width that is being used as Hyphen.
            When Hyphenation should take place, the <see cref="P:RichTextKit.RichString.SoftHyphenCharacter"/> gets replaced with this one
            </summary>
            <remarks>
            This property can be set to null, in which case it is set to 16 (the default Glyphinfo for a Hyphen)
            </remarks>
        </member>
        <member name="P:RichTextKit.RichString.MaxLines">
            <summary>
            The maximum number of lines after which lines will be 
            truncated and the final line will be appended with an 
            ellipsis (`...`) character.
            </summary>
            <remarks>
            This property can be set to null, in which case the vertical height of 
            the text block won't be capped.
            </remarks>
        </member>
        <member name="P:RichTextKit.RichString.EllipsisEnabled">
            <summary>
            Controls the rendering of an ellipsis (`...`) character,
            when the line has been truncated because of MaxWidth/MaxHeight/MaxLines.
            </summary>
            <remarks>
            The default value is true, an ellipsis will be rendered.
            </remarks>
        </member>
        <member name="P:RichTextKit.RichString.DefaultAlignment">
            <summary>
            Sets the default text alignment for cases where
            the rich text doesn't specify an alignment
            </summary>
        </member>
        <member name="P:RichTextKit.RichString.DefaultDirection">
            <summary>
            The default base text direction for cases where the rich text
            doesn't explicitly specify a text direction
            </summary>
        </member>
        <member name="P:RichTextKit.RichString.DefaultStyle">
            <summary>
            The default text style to be used as the current style at the start of the rich string.
            Subsequent formatting operations will be applied over this base style.
            </summary>
        </member>
        <member name="M:RichTextKit.RichString.Paint(SkiaSharp.SKCanvas,System.Single,RichTextKit.TextPaintOptions)">
            <summary>
            Paint this text block
            </summary>
            <param name="canvas">The Skia canvas to paint to</param>
            <param name="options">Options controlling the paint operation</param>
            <param name="alpha">transparency</param>
        </member>
        <member name="M:RichTextKit.RichString.Paint(SkiaSharp.SKCanvas,SkiaSharp.SKPoint,System.Single,RichTextKit.TextPaintOptions)">
            <summary>
            Paint this text block
            </summary>
            <param name="canvas">The Skia canvas to paint to</param>
            <param name="position">The top left position within the canvas to draw at</param>
            <param name="options">Options controlling the paint operation</param>
            <param name="alpha">transparency</param>
        </member>
        <member name="M:RichTextKit.RichString.DiscardLayout">
            <summary>
            Discards all internal layout structures
            </summary>
        </member>
        <member name="P:RichTextKit.RichString.MeasuredHeight">
            <summary>
            The total height of all lines.
            </summary>
        </member>
        <member name="P:RichTextKit.RichString.MeasuredWidth">
            <summary>
            The width of the widest line of text.
            </summary>
            <remarks>
            The returned width does not include any overhang.
            </remarks>
        </member>
        <member name="M:RichTextKit.RichString.MeasureParagraphs(System.Boolean,System.Collections.Generic.List{System.Single}@,System.Collections.Generic.List{System.Single}@)">
            <summary>
            retrieve the measurements for each paragraph in a Richstring
            </summary>
            <param name="doLayout"></param>
            <param name="ParagraphWidths"></param>
            <param name="ParagraphHeights"></param>
        </member>
        <member name="P:RichTextKit.RichString.LineCount">
            <summary>
            The number of lines in the text
            </summary>
        </member>
        <member name="P:RichTextKit.RichString.Truncated">
            <summary>
            Indicates if the text was truncated due to max height or max lines
            constraints
            </summary>
        </member>
        <member name="P:RichTextKit.RichString.Length">
            <summary>
            Gets the total length of the string in code points
            </summary>
        </member>
        <member name="P:RichTextKit.RichString.MeasuredLength">
            <summary>
            Gets the measured length of the string up to the truncation point
            in code points
            </summary>
        </member>
        <member name="P:RichTextKit.RichString.Revision">
            <summary>
            Returns the revision number of the content of this rich text string
            </summary>
            <remarks>
            If the revision number of a text string has not changed then painting it 
            again will result in the exact same representation as the previous time.
            </remarks>
        </member>
        <member name="M:RichTextKit.RichString.ToString">
            <summary>
            Provides the plain-text equivalent of this RichString
            </summary>
            <returns>A plain-text string</returns>
        </member>
        <member name="M:RichTextKit.RichString.HitTest(System.Single,System.Single)">
            <summary>
            Hit test this string
            </summary>
            <param name="x">The x-coordinate relative to top left of the string</param>
            <param name="y">The x-coordinate relative to top left of the string</param>
            <returns>A HitTestResult</returns>
        </member>
        <member name="M:RichTextKit.RichString.GetCaretInfo(RichTextKit.CaretPosition)">
            <inheritdoc cref="M:RichTextKit.TextBlock.GetCaretInfo(RichTextKit.CaretPosition)"/>
        </member>
        <member name="T:RichTextKit.StrikeThroughStyle">
            <summary>
            Describes the strike-through style for a run of text
            </summary>
        </member>
        <member name="F:RichTextKit.StrikeThroughStyle.None">
            <summary>
            No strike through.
            </summary>
        </member>
        <member name="F:RichTextKit.StrikeThroughStyle.Solid">
            <summary>
            Standard solid line strike through.
            </summary>
        </member>
        <member name="T:RichTextKit.Style">
            <summary>
            A basic implementation of IStyle interface provides styling 
            information for a run of text.
            </summary>
        </member>
        <member name="M:RichTextKit.Style.Seal">
            <summary>
            Seals the style to prevent it from further modification
            </summary>
        </member>
        <member name="P:RichTextKit.Style.FontFamily">
            <summary>
            The font family for text this text run (defaults to "Arial").
            </summary>
        </member>
        <member name="P:RichTextKit.Style.FontSize">
            <summary>
            The font size for text in this run (defaults to 16).
            </summary>
        </member>
        <member name="P:RichTextKit.Style.FontWeight">
            <summary>
            The font weight for text in this run (defaults to 400).
            </summary>
        </member>
        <member name="P:RichTextKit.Style.FontWidth">
            <summary>
            The font width for text in this run (defaults to WidthStyle.Normal).
            </summary>
        </member>
        <member name="P:RichTextKit.Style.FontItalic">
            <summary>
            True if the text in this run should be displayed in an italic
            font; otherwise False (defaults to false).
            </summary>
        </member>
        <member name="P:RichTextKit.Style.Underline">
            <summary>
            The underline style for text in this run (defaults to None).
            </summary>
        </member>
        <member name="P:RichTextKit.Style.StrikeThrough">
            <summary>
            The strike through style for the text in this run (defaults to None).
            </summary>
        </member>
        <member name="P:RichTextKit.Style.LineHeight">
            <summary>
            The line height for text in this run as a multiplier (defaults to 1.0).
            </summary>
        </member>
        <member name="P:RichTextKit.Style.TextColor">
            <summary>
            The text color for text in this run (defaults to black).
            </summary>
        </member>
        <member name="P:RichTextKit.Style.BackgroundColor">
            <summary>
            The background color of this run (no background is painted by default).
            </summary>
        </member>
        <member name="P:RichTextKit.Style.HaloColor">
            <summary>
            Color of the halo
            </summary>
        </member>
        <member name="P:RichTextKit.Style.HaloWidth">
            <summary>
            Width of halo
            </summary>
        </member>
        <member name="P:RichTextKit.Style.HaloBlur">
            <summary>
            Blur of halo
            </summary>
        </member>
        <member name="P:RichTextKit.Style.LetterSpacing">
            <summary>
            The character spacing for text in this run (defaults to 0).
            </summary>
        </member>
        <member name="P:RichTextKit.Style.FontVariant">
            <summary>
            The font variant (ie: super/sub-script) for text in this run.
            </summary>
        </member>
        <member name="P:RichTextKit.Style.TextDirection">
            <summary>
            Text direction override for this span
            </summary>
        </member>
        <member name="P:RichTextKit.Style.ReplacementCharacter">
            <inheritdoc />
        </member>
        <member name="M:RichTextKit.Style.Modify(System.String,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{SkiaSharp.SKFontStyleWidth},System.Nullable{System.Boolean},System.Nullable{RichTextKit.UnderlineStyle},System.Nullable{RichTextKit.StrikeThroughStyle},System.Nullable{System.Single},System.Nullable{SkiaSharp.SKColor},System.Nullable{SkiaSharp.SKColor},System.Nullable{SkiaSharp.SKColor},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{RichTextKit.FontVariant},System.Nullable{RichTextKit.TextDirection},System.Nullable{System.Char})">
            <summary>
            Modifies this style with one or more attribute changes and returns a new style
            </summary>
            <remarks>
            Note this method always creates a new style instance.To avoid creating excessive 
            style instances, consider using the StyleManager which caches instances of styles 
            with the same attributes
            </remarks>
            <param name="fontFamily">The new font family</param>
            <param name="fontSize">The new font size</param>
            <param name="fontWeight">The new font weight</param>
            <param name="fontWidth">The new font width</param>
            <param name="fontItalic">The new font italic</param>
            <param name="underline">The new underline style</param>
            <param name="strikeThrough">The new strike-through style</param>
            <param name="lineHeight">The new line height</param>
            <param name="textColor">The new text color</param>
            <param name="backgroundColor">The new background color</param>
            <param name="haloColor">Color of the halo background</param>
            <param name="haloBlur">Blur amount for the halo background</param>
            <param name="haloWidth">Width of the halo background</param>
            <param name="letterSpacing">The new letterSpacing</param>
            <param name="fontVariant">The new font variant</param>
            <param name="textDirection">The new text direction</param>
            <param name="replacementCharacter">The new replacement character</param>
            <returns>A new style with the passed attributes changed</returns>
        </member>
        <member name="T:RichTextKit.StyledText">
            <summary>
            Represents a block of formatted, laid out and measurable text
            </summary>
        </member>
        <member name="M:RichTextKit.StyledText.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RichTextKit.StyledText.#ctor(RichTextKit.Utils.Slice{System.Int32})">
            <summary>
            Constructs a styled text block from unstyled text
            </summary>
            <param name="codePoints"></param>
        </member>
        <member name="M:RichTextKit.StyledText.Clear">
            <summary>
            Clear the content of this text block
            </summary>
        </member>
        <member name="P:RichTextKit.StyledText.Length">
            <summary>
            The length of the added text in code points
            </summary>
        </member>
        <member name="P:RichTextKit.StyledText.CodePoints">
            <summary>
            Get the code points of this text block
            </summary>
        </member>
        <member name="P:RichTextKit.StyledText.StyleRuns">
            <summary>
            Get the text runs as added by AddText
            </summary>
        </member>
        <member name="M:RichTextKit.StyledText.CodePointToCharacterIndex(System.Int32)">
            <summary>
            Converts a code point index to a character index
            </summary>
            <param name="codePointIndex">The code point index to convert</param>
            <returns>The converted index</returns>
        </member>
        <member name="M:RichTextKit.StyledText.CharacterToCodePointIndex(System.Int32)">
            <summary>
            Converts a character index to a code point index
            </summary>
            <param name="characterIndex">The character index to convert</param>
            <returns>The converted index</returns>
        </member>
        <member name="M:RichTextKit.StyledText.AddText(System.ReadOnlySpan{System.Char},RichTextKit.IStyle)">
            <summary>
            Add text to this text block
            </summary>
            <remarks>
            The added text will be internally coverted to UTF32.  
            
            Note that all text indicies returned by and accepted by this object will 
            be UTF32 "code point indicies".  To convert between UTF16 character indicies 
            and UTF32 code point indicies use the <see cref="M:RichTextKit.StyledText.CodePointToCharacterIndex(System.Int32)"/> 
            and <see cref="M:RichTextKit.StyledText.CharacterToCodePointIndex(System.Int32)"/> methods
            </remarks>
            <param name="text">The text to add</param>
            <param name="style">The style of the text</param>
        </member>
        <member name="M:RichTextKit.StyledText.AddText(RichTextKit.Utils.Slice{System.Int32},RichTextKit.IStyle)">
            <summary>
            Add text to this paragraph
            </summary>
            <param name="text">The text to add</param>
            <param name="style">The style of the text</param>
        </member>
        <member name="M:RichTextKit.StyledText.AddText(System.String,RichTextKit.IStyle)">
            <summary>
            Add text to this text block
            </summary>
            <remarks>
            The added text will be internally coverted to UTF32.  
            
            Note that all text indicies returned by and accepted by this object will 
            be UTF32 "code point indicies".  To convert between UTF16 character indicies 
            and UTF32 code point indicies use the <see cref="M:RichTextKit.StyledText.CodePointToCharacterIndex(System.Int32)"/> 
            and <see cref="M:RichTextKit.StyledText.CharacterToCodePointIndex(System.Int32)"/> methods
            </remarks>
            <param name="text">The text to add</param>
            <param name="style">The style of the text</param>
        </member>
        <member name="M:RichTextKit.StyledText.AddText(RichTextKit.StyledText)">
            <summary>
            Add all the text from another text block to this text block
            </summary>
            <param name="text">Text to add</param>
        </member>
        <member name="M:RichTextKit.StyledText.InsertText(System.Int32,RichTextKit.StyledText)">
            <summary>
            Add all the text from another text block to this text block
            </summary>
            <param name="offset">The position at which to insert the text</param>
            <param name="text">Text to add</param>
        </member>
        <member name="M:RichTextKit.StyledText.InsertText(System.Int32,RichTextKit.Utils.Slice{System.Int32},RichTextKit.IStyle)">
            <summary>
            Add text to this text block
            </summary>
            <remarks>
            If the style is null, the new text will acquire the style of the character
            before the insertion point. If the text block is currently empty the style
            must be supplied.  If inserting at the start of a non-empty text block the
            style will be that of the first existing style run
            </remarks>
            <param name="position">The position to insert the text</param>
            <param name="text">The text to add</param>
            <param name="style">The style of the text (optional)</param>
        </member>
        <member name="M:RichTextKit.StyledText.InsertText(System.Int32,System.ReadOnlySpan{System.Char},RichTextKit.IStyle)">
            <summary>
            Add text to this text block
            </summary>
            <remarks>
            If the style is null, the new text will acquire the style of the character
            before the insertion point. If the text block is currently empty the style
            must be supplied.  If inserting at the start of a non-empty text block the
            style will be that of the first existing style run
            </remarks>
            <param name="position">The position to insert the text</param>
            <param name="text">The text to add</param>
            <param name="style">The style of the text (optional)</param>
        </member>
        <member name="M:RichTextKit.StyledText.InsertText(System.Int32,System.String,RichTextKit.IStyle)">
            <summary>
            Add text to this text block
            </summary>
            <remarks>
            If the style is null, the new text will acquire the style of the character
            before the insertion point. If the text block is currently empty the style
            must be supplied.  If inserting at the start of a non-empty text block the
            style will be that of the first existing style run
            </remarks>
            <param name="position">The position to insert the text</param>
            <param name="text">The text to add</param>
            <param name="style">The style of the text (optional)</param>
        </member>
        <member name="M:RichTextKit.StyledText.DeleteText(System.Int32,System.Int32)">
            <summary>
            Deletes text from this text block
            </summary>
            <param name="position">The code point index to delete from</param>
            <param name="length">The number of code points to delete</param>
        </member>
        <member name="M:RichTextKit.StyledText.ApplyStyle(System.Int32,System.Int32,RichTextKit.IStyle)">
            <summary>
            Overwrites the styles of existing text in the text block
            </summary>
            <param name="position">The code point index of the start of the text</param>
            <param name="length">The length of the text</param>
            <param name="style">The new style to be applied</param>
        </member>
        <member name="M:RichTextKit.StyledText.Extract(System.Int32,System.Int32)">
            <summary>
            Extract text from this styled text block
            </summary>
            <param name="from">The code point offset to extract from</param>
            <param name="length">The number of code points to extract</param>
            <returns>A new text block with the RHS split part of the text</returns>
        </member>
        <member name="M:RichTextKit.StyledText.GetStyleAtOffset(System.Int32)">
            <summary>
            Gets the style of the text at a specified offset
            </summary>
            <remarks>
            When on a style run boundary, returns the style of the preceeding run
            </remarks>
            <param name="offset">The code point offset in the text</param>
            <returns>An IStyle</returns>
        </member>
        <member name="M:RichTextKit.StyledText.FinishInsert(RichTextKit.Utils.Slice{System.Int32},RichTextKit.IStyle)">
            <summary>
            Completes the insertion of text by inserting it's style run
            and updating the offsets of existing style runs.
            </summary>
            <param name="utf32">The utf32 slice that was inserted</param>
            <param name="style">The style of the inserted text</param>
        </member>
        <member name="M:RichTextKit.StyledText.CoalescStyleRuns">
            <summary>
            Combines any consecutive style runs with the same style
            into a single run
            </summary>
        </member>
        <member name="M:RichTextKit.StyledText.OnChanged">
            <summary>
            Called whenever the content of this styled text block changes
            </summary>
        </member>
        <member name="F:RichTextKit.StyledText._codePoints">
            <summary>
            All code points as supplied by user, accumulated into a single buffer
            </summary>
        </member>
        <member name="F:RichTextKit.StyledText._styleRuns">
            <summary>
            A list of style runs, as supplied by user
            </summary>
        </member>
        <member name="F:RichTextKit.StyledText._hasTextDirectionOverrides">
            <summary>
            Set to true if any style runs have a directionality override.
            </summary>
        </member>
        <member name="M:RichTextKit.StyledText.ToString">
            <inheritdoc />
        </member>
        <member name="T:RichTextKit.StyleManager">
             <summary>
             Helper class for managing RichTextKit styles.
             </summary>
             <remarks>
             The StyleManager can be used to simplify the creation of styles by
             maintaining a current style that incremental changes can be made to.
            
             eg: turn bold on, underline off, change font family etc...
             
             The StyleManager also implements an internal stack to simplify applying
             a particular style and then popping back to the previous style.
             </remarks>
        </member>
        <member name="F:RichTextKit.StyleManager.Default">
            <summary>
            A per-thread style manager
            </summary>
        </member>
        <member name="M:RichTextKit.StyleManager.#ctor">
            <summary>
            Constructs a new StyleManager
            </summary>
        </member>
        <member name="P:RichTextKit.StyleManager.CurrentStyle">
            <summary>
            The current style
            </summary>
        </member>
        <member name="P:RichTextKit.StyleManager.DefaultStyle">
            <summary>
            The default style to be be used when Reset is called
            </summary>
        </member>
        <member name="M:RichTextKit.StyleManager.FromStyle(RichTextKit.IStyle)">
            <summary>
            Get a style that matches all the style attributes of the supplied style
            </summary>
            <remarks>
            This method creates a style owned by this style manager with all the same 
            attributes as the passed style.
            </remarks>
            <param name="value">The style to copy</param>
            <returns></returns>
        </member>
        <member name="M:RichTextKit.StyleManager.Reset">
            <summary>
            Resets the current style to the default style and resets the internal
            Push/Pop style stack to empty.
            </summary>
        </member>
        <member name="M:RichTextKit.StyleManager.Push">
            <summary>
            Saves the current state on an internal stack 
            </summary>
        </member>
        <member name="M:RichTextKit.StyleManager.Pop">
            <summary>
            Restores the current state on an internal stack 
            </summary>
        </member>
        <member name="M:RichTextKit.StyleManager.FontFamily(System.String)">
            <summary>
            Changes the font family and returns an updated IStyle
            </summary>
            <param name="fontFamily">The new font family</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.FontSize(System.Single)">
            <summary>
            Changes the font size and returns an updated IStyle
            </summary>
            <param name="fontSize">The new font size</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.FontWeight(System.Int32)">
            <summary>
            Changes the font weight and returns an updated IStyle
            </summary>
            <param name="fontWeight">The new font weight</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.Bold(System.Boolean)">
            <summary>
            Changes the font weight and returns an update IStyle (short cut to FontWeight)
            </summary>
            <param name="bold">The new font weight</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.FontWidth(SkiaSharp.SKFontStyleWidth)">
            <summary>
            Changes the font width and returns an updated IStyle
            </summary>
            <param name="fontWidth">The new font width</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.FontItalic(System.Boolean)">
            <summary>
            Changes the font italic setting and returns an updated IStyle
            </summary>
            <param name="fontItalic">The new font italic setting</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.Underline(RichTextKit.UnderlineStyle)">
            <summary>
            Changes the underline style and returns an updated IStyle
            </summary>
            <param name="underline">The new underline style</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.StrikeThrough(RichTextKit.StrikeThroughStyle)">
            <summary>
            Changes the strikethrough style and returns an updated IStyle
            </summary>
            <param name="strikeThrough">The new strikethrough style</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.LineHeight(System.Single)">
            <summary>
            Changes the line height and returns an updated IStyle
            </summary>
            <param name="lineHeight">The new line height</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.TextColor(SkiaSharp.SKColor)">
            <summary>
            Changes the text color and returns an updated IStyle
            </summary>
            <param name="textColor">The new text color</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.BackgroundColor(SkiaSharp.SKColor)">
            <summary>
            Changes the background color and returns an updated IStyle
            </summary>
            <param name="backgroundColor">The new background color</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.HaloColor(SkiaSharp.SKColor)">
            <summary>
            Changes the halo color and returns an updated IStyle
            </summary>
            <param name="haloColor">The new halo color</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.HaloWidth(System.Single)">
            <summary>
            Changes the halo width and returns an updated IStyle
            </summary>
            <param name="haloWidth">The new halo width</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.HaloBlur(System.Single)">
            <summary>
            Changes the halo blur width and returns an updated IStyle
            </summary>
            <param name="haloBlur">The new halo blur width</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.LetterSpacing(System.Single)">
            <summary>
            Changes the character spacing and returns an updated IStyle
            </summary>
            <param name="letterSpacing">The new character spacing</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.FontVariant(RichTextKit.FontVariant)">
            <summary>
            Changes the font variant and returns an updated IStyle
            </summary>
            <param name="fontVariant">The new font variant</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.TextDirection(RichTextKit.TextDirection)">
            <summary>
            Changes the text direction and returns an updated IStyle
            </summary>
            <param name="textDirection">The new text direction</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.ReplacementCharacter(System.Char)">
            <summary>
            Changes the text direction and returns an updated IStyle
            </summary>
            <param name="character">The new replacement character</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="M:RichTextKit.StyleManager.Update(System.String,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{SkiaSharp.SKFontStyleWidth},System.Nullable{System.Boolean},System.Nullable{RichTextKit.UnderlineStyle},System.Nullable{RichTextKit.StrikeThroughStyle},System.Nullable{System.Single},System.Nullable{SkiaSharp.SKColor},System.Nullable{SkiaSharp.SKColor},System.Nullable{SkiaSharp.SKColor},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{RichTextKit.FontVariant},System.Nullable{RichTextKit.TextDirection},System.Nullable{System.Char})">
            <summary>
            Update the current style by applying one or more changes to the current
            style.
            </summary>
            <param name="fontFamily">The new font family</param>
            <param name="fontSize">The new font size</param>
            <param name="fontWeight">The new font weight</param>
            <param name="fontWidth">The new font width</param>
            <param name="fontItalic">The new font italic</param>
            <param name="underline">The new underline style</param>
            <param name="strikeThrough">The new strike-through style</param>
            <param name="lineHeight">The new line height</param>
            <param name="textColor">The new text color</param>
            <param name="backgroundColor">The new text color</param>
            <param name="haloColor">The new text color</param>
            <param name="haloWidth">The new halo width</param>
            <param name="haloBlur">The new halo blur width</param>
            <param name="letterSpacing">The new letterSpacing</param>
            <param name="fontVariant">The new font variant</param>
            <param name="textDirection">The new text direction</param>
            <param name="replacementCharacter">The new replacement character</param>
            <returns>An IStyle for the new style</returns>
        </member>
        <member name="T:RichTextKit.StyleManager.StyleManagerStyle">
            <summary>
            Internal wrapper around Style to attach our owner reference check
            </summary>
        </member>
        <member name="T:RichTextKit.StyleRun">
            <summary>
            Represets a style run - a logical run of characters all with the same
            style.
            </summary>
        </member>
        <member name="P:RichTextKit.StyleRun.CodePoints">
            <summary>
            Get the code points of this run.
            </summary>
        </member>
        <member name="M:RichTextKit.StyleRun.ToString">
            <summary>
            Get the text of this style run
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:RichTextKit.StyleRun.Start">
            <summary>
            The index of the first code point in this run (relative to the text block
            as a whole).
            </summary>
        </member>
        <member name="P:RichTextKit.StyleRun.Length">
            <summary>
            The number of code points this run.
            </summary>
        </member>
        <member name="P:RichTextKit.StyleRun.End">
            <summary>
            The index of the first code point after this run.
            </summary>
        </member>
        <member name="P:RichTextKit.StyleRun.Style">
            <summary>
            The style attributes to be applied to text in this run.
            </summary>
        </member>
        <member name="F:RichTextKit.StyleRun.CodePointBuffer">
            <summary>
            The global list of code points
            </summary>
        </member>
        <member name="T:RichTextKit.TextAlignment">
            <summary>
            Species the alignment of text within a text block
            </summary>
        </member>
        <member name="F:RichTextKit.TextAlignment.Auto">
            <summary>
            Use base direction of the text block.
            </summary>
        </member>
        <member name="F:RichTextKit.TextAlignment.Left">
            <summary>
            Left-aligns text to a x-coord of 0.
            </summary>
        </member>
        <member name="F:RichTextKit.TextAlignment.Center">
            <summary>
            Center aligns text between 0 and <see cref="P:RichTextKit.TextBlock.MaxWidth"/> unless not
            specified in which case it uses the widest line in the text block.
            </summary>
        </member>
        <member name="F:RichTextKit.TextAlignment.Right">
            <summary>
            Right aligns text <see cref="P:RichTextKit.TextBlock.MaxWidth"/> unless not
            specified in which case it right aligns to the widest line in the text block.
            </summary>
        </member>
        <member name="T:RichTextKit.TextBlock">
            <summary>
            Represents a block of formatted, laid out and measurable text
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:RichTextKit.TextBlock.MaxWidth">
            <summary>
            The max width property sets the maximum width of a line, after which 
            the line will be wrapped onto the next line.
            </summary>
            <remarks>
            This property can be set to null, in which case lines won't be wrapped.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.RenderWidth">
            <summary>
            This property is only used for text alignment when word wrapping
            is disabled (MaxWidth == null).  When set it will be used for text
            alignment.
            </summary>
        </member>
        <member name="P:RichTextKit.TextBlock.MaxHeight">
            <summary>
            The maximum height of the TextBlock after which lines will be 
            truncated and the final line will be appended with an 
            ellipsis (`...`) character.
            </summary>
            <remarks>
            This property can be set to null, in which case the vertical height of the text block
            won't be capped.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.MaxLines">
            <summary>
            The maximum number of lines after which lines will be 
            truncated and the final line will be appended with an 
            ellipsis (`...`) character.
            </summary>
            <remarks>
            This property can be set to null, in which case the vertical height of 
            the text block won't be capped.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.EllipsisEnabled">
            <summary>
            Controls the rendering of an ellipsis (`...`) character,
            when the line has been truncated because of MaxWidth/MaxHeight/MaxLines.
            </summary>
            <remarks>
            The default value is true, an ellipsis will be rendered.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.SoftHyphenCharacter">
            <summary>
            The Character that is being used as SoftHyphen
            </summary>
            <remarks>
            This property can be set to null, in which case it is set to 173 (the default unicode SoftHyphen)
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.HyphenCharacter">
            <summary>
            The Character that is being used as SoftHyphen
            </summary>
            <remarks>
            This property can be set to null, in which case it is set to 16 (the default glyphInfo for Hyphen)
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.HyphenCharacterWidth">
            <summary>
            The Character that is being used as SoftHyphen
            </summary>
            <remarks>
            This property can be set to null, in which case it is set to 16 (the default glyphInfo for Hyphen)
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.Alignment">
            <summary>
            Sets the left, right or center alignment of the text block.
            </summary>
            <remarks>
            Set this property to <see cref="F:RichTextKit.TextAlignment.Auto"/> to align
            the paragraph according to the <see cref="P:RichTextKit.TextBlock.BaseDirection"/>.
            
            * If the <see cref="P:RichTextKit.TextBlock.MaxWidth"/> property has been set this will 
              be used for alignment calculations.  
            * If the <see cref="P:RichTextKit.TextBlock.MaxWidth"/> property has not been set, the 
              width of the longest line will be used.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.BaseDirection">
            <summary>
            The base directionality of this text block (whether text is laid out 
            left to right, or right to left)
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.Clear">
            <summary>
            Clear the content of this text block
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.Copy(System.Int32,System.Int32)">
            <summary>
            Split this text block at the specified code point index
            </summary>
            <param name="from">The code point index to copy from</param>
            <param name="length">The number of code points to copy</param>
            <returns>A new text block with the RHS split part of the text</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.OnChanged">
            <inheritdoc />
        </member>
        <member name="M:RichTextKit.TextBlock.AddEllipsis">
            <summary>
            Appends an ellipsis to this text block
            </summary>
            <remarks>
            This method checks if the text block has already been truncated and if
            not appends an ellipsis without changing the measured vertical layout of the
            text block.  The ellipsis only remains in effect until the block's layout
            is recalculated.
            
            The text block must have at least one line.  If the block contains no text,
            then use AddText("\n", style) to create a single line with an attached style
            but no text.
            
            The intended purpose of this is to included an ellipsis on this text block
            when a following text block doesn't fit.
            </remarks>
        </member>
        <member name="M:RichTextKit.TextBlock.Layout">
            <summary>
            Updates the internal layout of the text block
            </summary>
            <remarks>
            Generally you don't need to call this method as the layout
            will be automatically updated as needed.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.FontRuns">
            <summary>
            Get all font runs for this text block
            </summary>
        </member>
        <member name="P:RichTextKit.TextBlock.Lines">
            <summary>
            Get all the lines for this text block
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.Paint(SkiaSharp.SKCanvas,System.Single,RichTextKit.TextPaintOptions)">
            <summary>
            Paint this text block
            </summary>
            <param name="canvas">The Skia canvas to paint to</param>
            <param name="options">Options controlling the paint operation</param>
            <param name="alpha"> transparency</param>
        </member>
        <member name="M:RichTextKit.TextBlock.Paint(SkiaSharp.SKCanvas,SkiaSharp.SKPoint,System.Single,RichTextKit.TextPaintOptions)">
            <summary>
            Paint this text block
            </summary>
            <param name="canvas">The Skia canvas to paint to</param>
            <param name="position">The top left position within the canvas to draw at</param>
            <param name="options">Options controlling the paint operation</param>
            <param name="alpha">transparency</param>
        </member>
        <member name="P:RichTextKit.TextBlock.MeasuredHeight">
            <summary>
            The total height of all lines.
            </summary>
        </member>
        <member name="P:RichTextKit.TextBlock.MeasuredLength">
            <summary>
            The length of the displayed text (in code points)
            </summary>
            <remarks>
            If the text is truncated, this is the index of the point
            at which the ellipsis was inserted.  If the text it not
            truncated, is the length of all added text.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.LineCount">
            <summary>
            The number of lines in the text
            </summary>
        </member>
        <member name="P:RichTextKit.TextBlock.MeasuredWidth">
            <summary>
            The width of the widest line of text.
            </summary>
            <remarks>
            The returned width does not include any overhang.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.Truncated">
            <summary>
            Indicates if the text was truncated due to max height or max lines
            constraints
            </summary>
        </member>
        <member name="P:RichTextKit.TextBlock.MeasuredPadding">
            <summary>
            Gets the size of any unused space around the text.
            </summary>
            <remarks>
            If MaxWidth is not set, the left and right padding will always be zero.
            
            This property also returns a bottom padding amount if MaxHeight is set.
            
            The returned top padding is always zero.
            
            The return rectangle describes padding amounts for each edge - not 
            rectangle co-ordinates.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextBlock.MeasuredOverhang">
            <summary>
            Gets the actual measured overhang in each direction based on the 
            fonts used, and the supplied text.
            </summary>
            <remarks>
            The return rectangle describes overhang amounts for each edge - not 
            rectangle co-ordinates.
            </remarks>
        </member>
        <member name="M:RichTextKit.TextBlock.HitTestLine(System.Int32,System.Single)">
            <summary>
            Hit test this block of text
            </summary>
            <param name="lineIndex">The line to be hit test</param>
            <param name="x">The x-coordinate relative to top left of the block</param>
            <returns>A HitTestResult</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.HitTest(System.Single,System.Single)">
            <summary>
            Hit test this block of text
            </summary>
            <param name="x">The x-coordinate relative to top left of the block</param>
            <param name="y">The x-coordinate relative to top left of the block</param>
            <returns>A HitTestResult</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.BuildCaretIndicies">
            <summary>
            Build map of all caret positions 
            </summary>
        </member>
        <member name="P:RichTextKit.TextBlock.CaretIndicies">
            <summary>
            Retrieves a list of all valid caret positions
            </summary>
        </member>
        <member name="P:RichTextKit.TextBlock.WordBoundaryIndicies">
            <summary>
            Retrieves a list of all valid caret positions
            </summary>
        </member>
        <member name="P:RichTextKit.TextBlock.LineIndicies">
            <summary>
            Retrieves a list of the indicies of the first code point in each line
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.LookupCaretIndex(System.Int32)">
            <summary>
            Given a code point index, find the index in the CaretIndicies
            </summary>
            <param name="codePointIndex">The code point index to lookup</param>
            <returns>The index in the code point idnex in the CaretIndicies array</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.GetCaretInfo(RichTextKit.CaretPosition)">
            <summary>
            Calculates useful information for displaying a caret
            </summary>
            <remarks>
            When altPosition is true, if the code point index indicates the first
            code point after a line break, the returned caret position will be the
            end of the previous line (instead of the start of the next line)
            </remarks>
            <param name="position">The caret position</param>
            <returns>A CaretInfo struct</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.GetFontRunForCaretMetrics(RichTextKit.CaretInfo,RichTextKit.FontRun)">
            <summary>
            Internal helper to get the font run that should
            be used for caret metrics.
            </summary>
            <remarks>
            The returned font run is the font run of the previous
            character, or the same character if the first font run
            on the line.
            </remarks>
            <returns>The determined font run</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.FindFontRunForCodePointIndex(System.Int32)">
            <summary>
            Find the font run holding a code point index
            </summary>
            <param name="codePointIndex"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextKit.TextBlock.InvalidateLayout">
            <summary>
            Invalidate the layout
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._needsLayout">
            <summary>
            Set if the current layout is dirty
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._maxWidth">
            <summary>
            Maximum width (wrap point, or null for no wrapping)
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._renderWidth">
            <summary>
            Render width (used for alignment with maxwidth is null)
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._maxWidthResolved">
            <summary>
            Width at which to wrap content
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._maxHeight">
            <summary>
            Maximum height (crop lines after this)
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._maxHeightResolved">
            <summary>
            Maximum layout height
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._maxLines">
            <summary>
            Maximum number of lines
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._maxLinesResolved">
            <summary>
            Maximum number of lines
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._ellipsisEnabled">
            <summary>
            Option to control ellipsis
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._softHyphenCharacter">
            <summary>
            The Character that represents a SoftHyphen
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._hyphenCharacter">
            <summary>
            The Character that represents a SoftHyphen
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._hyphenCharacterWidth">
            <summary>
            The Characters Width that represents a SoftHyphen
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._textAlignment">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._baseDirection">
            <summary>
            Base direction as set by user
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._resolvedBaseDirection">
            <summary>
            Base direction as resolved if auto
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._textShapingBuffers">
            <summary>
            Re-usable buffers for text shaping results
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._bidiData">
            <summary>
            Reusable buffer for bidi data
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._fontRuns">
            <summary>
            A list of font runs, after splitting by directionality, user styles and font fallback
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._lineBreaker">
            <summary>
            Helper for splitting code into linebreaks
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._measuredHeight">
            <summary>
            The measured height
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._measuredWidth">
            <summary>
            The measured width
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._leftOverhang">
            <summary>
            The required left overhang
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._rightOverhang">
            <summary>
            The required left overhang
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._topOverhang">
            <summary>
            The required top overhang
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._bottomOverhang">
            <summary>
            The required bottom overhang
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._truncated">
            <summary>
            Indicates if the text was truncated by max height/max lines limitations
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._lines">
            <summary>
            The final laid out set of lines
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._caretIndicies">
            <summary>
            Calculated valid caret indicies
            </summary>
        </member>
        <member name="F:RichTextKit.TextBlock._wordBoundaryIndicies">
            <summary>
            Calculated word boundary caret indicies
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.ResolveTextAlignment">
            <summary>
            Resolve the text alignment when set to Auto
            </summary>
            <returns>Resolved text alignment (left, right or center)</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.BuildFontRuns">
            <summary>
            Split into runs based on directionality and style switch points
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.TypefaceFromStyle(RichTextKit.IStyle,System.Boolean)">
            <summary>
            Gets the Skia type face for a IStyle
            </summary>
            <param name="style">The style</param>
            <param name="ignoreFontVariants">When true, doesn't embolden super/sub scripts</param>
            <returns>The Skia typeface</returns>
        </member>
        <member name="P:RichTextKit.TextBlock.FontMapper">
            <summary>
            Gets or sets the font mapper to be used by this TextBlock instance
            </summary>
            <remarks>
            When null, the default font mapper (FontMapper.Default) is used.
            </remarks>
        </member>
        <member name="M:RichTextKit.TextBlock.AddDirectionalRun(RichTextKit.StyleRun,System.Int32,System.Int32,RichTextKit.TextDirection,RichTextKit.IStyle)">
            <summary>
            Adds a run of directional text
            </summary>
            <param name="styleRun">The style run the directional run was created from</param>
            <param name="start">Index of the first code point _codePoints buffer</param>
            <param name="length">Number of code points in this run</param>
            <param name="direction">The direction of the text</param>
            <param name="style">The user supplied style for this run</param>
        </member>
        <member name="M:RichTextKit.TextBlock.AddFontRun(RichTextKit.StyleRun,System.Int32,System.Int32,RichTextKit.TextDirection,RichTextKit.IStyle,SkiaSharp.SKTypeface,SkiaSharp.SKTypeface)">
            <summary>
            Adds a run of single font text
            </summary>
            <param name="styleRun">The style run the directional run was created from</param>
            <param name="start">Index of the first code point _codePoints buffer</param>
            <param name="length">Number of code points in this run</param>
            <param name="direction">The direction of the text</param>
            <param name="style">The user supplied style for this run</param>
            <param name="typeface">The typeface of the run</param>
            <param name="asFallbackFor">The typeface this is a fallback for</param>
        </member>
        <member name="M:RichTextKit.TextBlock.CreateFontRun(RichTextKit.StyleRun,RichTextKit.Utils.Slice{System.Int32},RichTextKit.TextDirection,RichTextKit.IStyle,SkiaSharp.SKTypeface,SkiaSharp.SKTypeface)">
            <summary>
            Helper to create a font run
            </summary>
            <param name="styleRun">The style run owning this font run</param>
            <param name="codePoints">The code points of the run</param>
            <param name="direction">The run direction</param>
            <param name="style">The user supplied style for this run</param>
            <param name="typeface">The typeface of the run</param>
            <param name="asFallbackFor">The original typeface this is a fallback for</param>
            <returns>A FontRun</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.BreakLines">
            <summary>
            Break the list of font runs into lines
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.BuildLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a single line from the specified font run indicies
            </summary>
            <param name="frIndexStartOfLine">Index of the first font run in the line</param>
            <param name="frSplitIndex">Index of the last type</param>
            <param name="frTrailingWhiteSpaceIndex"></param>
        </member>
        <member name="M:RichTextKit.TextBlock.LayoutLine(RichTextKit.TextLine)">
            <summary>
            Layout the font runs within a line
            </summary>
            <param name="line">The line to layout</param>
        </member>
        <member name="M:RichTextKit.TextBlock.LayoutLineLTR(RichTextKit.TextLine)">
            <summary>
            Layout a line (LTR edition)
            </summary>
            <param name="line">The line to be laid out</param>
            <returns>A final x-adjustment to be applied to the line's font runs</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.LayoutLineRTL(RichTextKit.TextLine)">
            <summary>
            Layout a line (RTL edition)
            </summary>
            <param name="line">The line to be laid out</param>
            <returns>A final x-adjustment to be applied to the line's font runs</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.LayoutLineRTLWordStyle(RichTextKit.TextLine)">
            <summary>
            Layout a line (MS Word RTL edition)
            </summary>
            <param name="line">The line to be laid out</param>
            <returns>A final x-adjustment to be applied to the line's font runs</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.AdjustHyphens">
            <summary>
            replace a given SoftHyphen Character at a lineEnd with a given Hyphen Character
            Also Shift The Whole Line a bit to the left, when Centered or Right 
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.FinalizeLines">
            <summary>
            Finalize lines, positioning for horizontal alignment and 
            moving all glyphs into position (relative to the text block top left)
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.FindFontRunForCodePointIndex(System.Int32,System.Int32)">
            <summary>
            Finds the font run containing a specified code point index
            </summary>
            <param name="from">The font run index to start from</param>
            <param name="codePointIndex">The code point index being searched for</param>
            <returns>The index of the font run containing the specified code point 
            index, or font run count if past the end</returns>
        </member>
        <member name="F:RichTextKit.TextBlock.ellipsis">
            <summary>
            Re-usable buffer holding just the ellipsis character
            </summary>
        </member>
        <member name="M:RichTextKit.TextBlock.CreateEllipsisRun(RichTextKit.FontRun)">
            <summary>
            Create a special font run containing the ellipsis character
            based on an existing run
            </summary>
            <param name="basedOn">The run to base the styling on</param>
            <returns>A new font run containing the ellipsis character</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.AdornLineWithEllipsis(RichTextKit.TextLine,System.Boolean)">
            <summary>
            Update the current line with a new font run containing the trailing ellipsis
            </summary>
            <param name="line">The line to be updated</param>
            <param name="postLayout">True if the ellipsis is being added post layout via a user call to AddEllipsis()</param>
        </member>
        <member name="M:RichTextKit.TextBlock.CheckHeightConstraints">
            <summary>
            Check if the current layout has exceeded any height restrictions
            and if so, remove any offending lines and optionally create the
            ellipsis at the end indicating the text has been truncated
            </summary>
            <returns>True if can continue adding lines; otherwise false</returns>
        </member>
        <member name="M:RichTextKit.TextBlock.ResetPooledMemory">
            <summary>
            Resets and internal object and memory pools.
            </summary>
            <remarks>
            For performance reasons and to reduce pressure on the 
            garbage collector, RichTextKit maintains several internal
            per-thread memory and object pools.
            
            If you create a very large text block, these pools will be 
            enlarged to cope with content of larger text blocks.
            
            This method can be used to reset those pools to reclaim the 
            extra memory they consumed.
            
            In general you can ignore this method, unless you know you're
            working with very large text blocks (which you shouldn't be
            anyway, since a text block is only supposed to be a single
            paragraph).
            /// </remarks>
        </member>
        <member name="T:RichTextKit.TextDirection">
            <summary>
            Specifies the text writing direction for text.
            </summary>
        </member>
        <member name="F:RichTextKit.TextDirection.LTR">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:RichTextKit.TextDirection.RTL">
            <summary>
            Right to left.
            </summary>
        </member>
        <member name="F:RichTextKit.TextDirection.Auto">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="T:RichTextKit.TextLine">
            <summary>
            Represents a laid out line of text.
            </summary>
        </member>
        <member name="M:RichTextKit.TextLine.#ctor">
            <summary>
            Constructs a new TextLine.
            </summary>
        </member>
        <member name="P:RichTextKit.TextLine.Runs">
            <summary>
            Gets the set of text runs comprising this line.
            </summary>
            <remarks>
            Font runs are order logically (ie: in code point index order)
            but may have unordered <see cref="F:RichTextKit.FontRun.XCoord"/>'s when right to
            left text is in use.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextLine.TextBlock">
            <summary>
            Gets the text block that owns this line.
            </summary>
        </member>
        <member name="P:RichTextKit.TextLine.NextLine">
            <summary>
            Gets the next line in this text block, or null if this is the last line.
            </summary>
        </member>
        <member name="P:RichTextKit.TextLine.PreviousLine">
            <summary>
            Gets the previous line in this text block, or null if this is the first line.
            </summary>
        </member>
        <member name="P:RichTextKit.TextLine.YCoord">
            <summary>
            Gets the y-coordinate of the top of this line, relative to the top of the text block.
            </summary>
        </member>
        <member name="P:RichTextKit.TextLine.BaseLine">
            <summary>
            Gets the base line of this line (relative to <see cref="P:RichTextKit.TextLine.YCoord"/>)
            </summary>
        </member>
        <member name="P:RichTextKit.TextLine.MaxAscent">
            <summary>
            Gets the maximum magnitude ascent of all font runs in this line.
            </summary>
            <remarks>
            The ascent is reported as a negative value from the base line.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextLine.MaxDescent">
            <summary>
            Gets the maximum descent of all font runs in this line.
            </summary>
            <remarks>
            The descent is reported as a positive value from the base line.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextLine.TextHeight">
            <summary>
            Gets the text height of this line.
            </summary>
            <remarks>
            The text height of a line is the sum of the ascent and desent.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextLine.Height">
            <summary>
            Gets the height of this line
            </summary>
            <remarks>
            The height of a line is based on the font and <see cref="P:RichTextKit.IStyle.LineHeight"/>
            value of all runs in this line.
            </remarks>
        </member>
        <member name="P:RichTextKit.TextLine.Width">
            <summary>
            The width of the content on this line, excluding trailing whitespace and overhang.
            </summary>
        </member>
        <member name="M:RichTextKit.TextLine.Paint(RichTextKit.PaintTextContext,System.Single)">
            <summary>
            Paint this line
            </summary>
            <param name="ctx">The paint context</param>
            <param name="alpha">a global alpha factor</param>
        </member>
        <member name="P:RichTextKit.TextLine.Start">
            <summary>
            Code point index of start of this line
            </summary>
        </member>
        <member name="P:RichTextKit.TextLine.Length">
            <summary>
            The length of this line in codepoints
            </summary>
        </member>
        <member name="P:RichTextKit.TextLine.End">
            <summary>
            The code point index of the first character after this line
            </summary>
        </member>
        <member name="M:RichTextKit.TextLine.HitTest(System.Single)">
            <summary>
            Hit test this line, working out the cluster the x position is over
            and closest to.
            </summary>
            <remarks>
            This method only populates the code point indicies in the returned result
            and the line indicies will be -1
            </remarks>
            <param name="x">The xcoord relative to the text block</param>
        </member>
        <member name="M:RichTextKit.TextLine.HitTest(System.Single,RichTextKit.HitTestResult@)">
            <summary>
            Hit test this line, working out the cluster the x position is over
            and closest to.
            </summary>
            <param name="x">The xcoord relative to the text block</param>
            <param name="htr">HitTestResult to be filled out</param>
        </member>
        <member name="F:RichTextKit.TextLine.RunsInternal">
            <summary>
            Internal List of runs
            </summary>
        </member>
        <member name="T:RichTextKit.TextPaintOptions">
            <summary>
            Options to control how TextBlock is rendered.
            </summary>
        </member>
        <member name="M:RichTextKit.TextPaintOptions.#ctor">
            <summary>
            Constructs a new text paint options
            </summary>
        </member>
        <member name="M:RichTextKit.TextPaintOptions.Clone">
            <summary>
            Creates a clone of this object
            </summary>
            <returns>The closed object</returns>
        </member>
        <member name="P:RichTextKit.TextPaintOptions.Selection">
            <summary>
            An optional TextRange to painted as selected.
            </summary>
        </member>
        <member name="P:RichTextKit.TextPaintOptions.SelectionColor">
            <summary>
            The color to be used for the selection background.
            </summary>
        </member>
        <member name="P:RichTextKit.TextPaintOptions.SelectionHandleColor">
            <summary>
            The color to be used for touch screen selection handles
            </summary>
        </member>
        <member name="P:RichTextKit.TextPaintOptions.SelectionHandleScale">
            <summary>
            Scaling of the touch screen selection handles
            </summary>
            <remarks>
            Sets the scaling of the selection handles.  This can be used
            to keep the selection handle size consistent even if zooming in
            on rendered text.  Set to zero to disable selection handles
            </remarks>
        </member>
        <member name="P:RichTextKit.TextPaintOptions.Edging">
            <summary>
            Controls how font edges are drawn
            </summary>
        </member>
        <member name="P:RichTextKit.TextPaintOptions.SubpixelPositioning">
            <summary>
            Requests text be drawn at sub-pixel offsets
            </summary>
        </member>
        <member name="P:RichTextKit.TextPaintOptions.IsAntialias">
            <summary>
            Controls whether text is rendered with anti-aliasing.
            </summary>
        </member>
        <member name="P:RichTextKit.TextPaintOptions.LcdRenderText">
            <summary>
            Controls whether text is rendered using LCD sub-pixel rendering.
            </summary>
        </member>
        <member name="P:RichTextKit.TextPaintOptions.Hinting">
            <summary>
            Controls the font hint used when rendering text
            </summary>
        </member>
        <member name="F:RichTextKit.TextPaintOptions.Default">
            <summary>
            A default set of paint options that renders text blocks without 
            a selection range.
            </summary>
        </member>
        <member name="T:RichTextKit.TextRange">
            <summary>
            Represents a range of code points in a text document
            </summary>
        </member>
        <member name="M:RichTextKit.TextRange.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a TextRange
            </summary>
            <param name="start">The code point index of the start of the range</param>
            <param name="end">The code point index of the end of the range</param>
            <param name="altPosition">Whether the caret at the end of the range should be displayed in its alternative position</param>
        </member>
        <member name="M:RichTextKit.TextRange.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a TextRange with a non-range position
            </summary>
            <param name="position">The code point index of the position</param>
            <param name="altPosition">Whether the caret should be displayed in its alternative position</param>
        </member>
        <member name="M:RichTextKit.TextRange.#ctor(RichTextKit.CaretPosition)">
            <summary>
            Initializes a TextRange from a caret position
            </summary>
            <param name="position">The code point index of the position</param>
        </member>
        <member name="F:RichTextKit.TextRange.Start">
            <summary>
            The code point index of the start of the range
            </summary>
        </member>
        <member name="F:RichTextKit.TextRange.End">
            <summary>
            The code point index of the end of the range
            </summary>
        </member>
        <member name="F:RichTextKit.TextRange.AltPosition">
            <summary>
            True if the end of the range should be displayed
            with the caret in the alt position
            </summary>
        </member>
        <member name="P:RichTextKit.TextRange.Length">
            <summary>
            Get the length of this range
            </summary>
            <remarks>
            Will return negative if the range isn't normalized
            </remarks>
        </member>
        <member name="M:RichTextKit.TextRange.Offset(System.Int32)">
            <summary>
            Offset this text range by the specified amount
            </summary>
            <param name="delta">The number of code points to offset the range by</param>
            <returns>A new TextRange</returns>
        </member>
        <member name="P:RichTextKit.TextRange.Reversed">
            <summary>
            Returns the reversed text range
            </summary>
        </member>
        <member name="P:RichTextKit.TextRange.Normalized">
            <summary>
            Returns the normalized version of the text range
            </summary>
        </member>
        <member name="M:RichTextKit.TextRange.IsEqual(RichTextKit.TextRange)">
            <summary>
            Compare this text range to another for equality
            </summary>
            <param name="other">The text range to compare to</param>
            <returns>True if the text ranges are equal</returns>
        </member>
        <member name="P:RichTextKit.TextRange.IsRange">
            <summary>
            Check if this is actually a range
            </summary>
        </member>
        <member name="P:RichTextKit.TextRange.Minimum">
            <summary>
            Get the end of the range closer to the start of the document
            </summary>
        </member>
        <member name="P:RichTextKit.TextRange.Maximum">
            <summary>
            Get the end of the range closer to the end of the document
            </summary>
        </member>
        <member name="P:RichTextKit.TextRange.CaretPosition">
            <summary>
            Gets the end of the range as a caret position
            </summary>
        </member>
        <member name="M:RichTextKit.TextRange.Clamp(System.Int32)">
            <summary>
            Clamp the text range to a document length
            </summary>
            <param name="maxCodePointIndex">The max code point index</param>
            <returns>A clamped TextRange</returns>
        </member>
        <member name="M:RichTextKit.TextRange.UpdateForEdit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an updated text range that tries to represent the same
            piece of text from before an edit to after the edit.
            </summary>
            <param name="codePointIndex">The position of the edit</param>
            <param name="oldLength">The length of text deleted</param>
            <param name="newLength">The length of text inserted</param>
            <returns>An updated text range</returns>
        </member>
        <member name="M:RichTextKit.TextRange.Union(RichTextKit.TextRange,RichTextKit.TextRange)">
            <summary>
            Create a new range that is the union of two other ranges.  The
            union is the smallest range that contains the other two other 
            ranges.
            </summary>
            <remarks>
            The returned range is configured such that the 'b' range
            is used for the end position (ie: the caret)
            </remarks>
            <param name="a">The first text range</param>
            <param name="b">The second text range</param>
            <returns>A range that encompasses both ranges</returns>
        </member>
        <member name="M:RichTextKit.TextRange.ToString">
            <inheritdoc />
        </member>
        <member name="T:RichTextKit.TextShaper">
            <summary>
            Helper class for shaping text
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper._shapers">
            <summary>
            Cache of shapers for typefaces
            </summary>
        </member>
        <member name="M:RichTextKit.TextShaper.ForTypeface(SkiaSharp.SKTypeface)">
            <summary>
            Get the text shaper for a particular type face
            </summary>
            <param name="typeface">The typeface being queried for</param>
            <returns>A TextShaper</returns>
        </member>
        <member name="M:RichTextKit.TextShaper.#ctor(SkiaSharp.SKTypeface)">
            <summary>
            Constructs a new TextShaper 
            </summary>
            <param name="typeface">The typeface of this shaper</param>
        </member>
        <member name="M:RichTextKit.TextShaper.Dispose">
            <summary>
            Dispose this text shaper
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper._font">
            <summary>
            The HarfBuzz font for this shaper
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper._typeface">
            <summary>
            The typeface for this shaper
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper._fontMetrics">
            <summary>
            Font metrics for the font
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper._isFixedPitch">
            <summary>
            True if this font face is fixed pitch
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper._fixedCharacterWidth">
            <summary>
            Fixed pitch character width
            </summary>
        </member>
        <member name="T:RichTextKit.TextShaper.ResultBufferSet">
            <summary>
            A set of re-usable result buffers to store the result of text shaping operation
            </summary>
        </member>
        <member name="T:RichTextKit.TextShaper.Result">
            <summary>
            Returned as the result of a text shaping operation
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper.Result.GlyphIndicies">
            <summary>
            The glyph indicies of all glyphs required to render the shaped text
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper.Result.GlyphPositions">
            <summary>
            The position of each glyph
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper.Result.Clusters">
            <summary>
            One entry for each glyph, showing the code point index
            of the characters it was derived from
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper.Result.EndXCoord">
            <summary>
            The end position of the rendered text
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper.Result.CodePointXCoords">
            <summary>
            The X-Position of each passed code point
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper.Result.Ascent">
            <summary>
            The ascent of the font
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper.Result.Descent">
            <summary>
            The descent of the font
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper.Result.Leading">
            <summary>
            The leading of the font
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper.Result.XMin">
            <summary>
            The XMin for the font
            </summary>
        </member>
        <member name="F:RichTextKit.TextShaper.overScale">
            <summary>
            Over scale used for all font operations
            </summary>
        </member>
        <member name="M:RichTextKit.TextShaper.ShapeReplacement(RichTextKit.TextShaper.ResultBufferSet,RichTextKit.Utils.Slice{System.Int32},RichTextKit.IStyle,System.Int32)">
            <summary>
            Shape an array of utf-32 code points replacing each grapheme cluster with a replacement character
            </summary>
            <param name="bufferSet">A re-usable text shaping buffer set that results will be allocated from</param>
            <param name="codePoints">The utf-32 code points to be shaped</param>
            <param name="style">The user style for the text</param>
            <param name="clusterAdjustment">A value to add to all reported cluster numbers</param>
            <returns>A TextShaper.Result representing the shaped text</returns>
        </member>
        <member name="M:RichTextKit.TextShaper.Shape(RichTextKit.TextShaper.ResultBufferSet,RichTextKit.Utils.Slice{System.Int32},RichTextKit.IStyle,RichTextKit.TextDirection,System.Int32,SkiaSharp.SKTypeface,RichTextKit.TextAlignment)">
            <summary>
            Shape an array of utf-32 code points
            </summary>
            <param name="bufferSet">A re-usable text shaping buffer set that results will be allocated from</param>
            <param name="codePoints">The utf-32 code points to be shaped</param>
            <param name="style">The user style for the text</param>
            <param name="direction">LTR or RTL direction</param>
            <param name="clusterAdjustment">A value to add to all reported cluster numbers</param>
            <param name="asFallbackFor">The type face this font is a fallback for</param>
            <param name="textAlignment">The text alignment of the paragraph, used to control placement of glyphs within character cell when letter spacing used</param>
            <returns>A TextShaper.Result representing the shaped text</returns>
        </member>
        <member name="T:RichTextKit.UnderlineStyle">
            <summary>
            Describes the underline style for a run of text
            </summary>
        </member>
        <member name="F:RichTextKit.UnderlineStyle.None">
            <summary>
            No underline.
            </summary>
        </member>
        <member name="F:RichTextKit.UnderlineStyle.Gapped">
            <summary>
            Underline with gaps over descenders.
            </summary>
        </member>
        <member name="F:RichTextKit.UnderlineStyle.Solid">
            <summary>
            Underline with no gaps over descenders.
            </summary>
        </member>
        <member name="F:RichTextKit.UnderlineStyle.ImeInput">
            <summary>
            Underline style for IME input
            </summary>
        </member>
        <member name="F:RichTextKit.UnderlineStyle.ImeConverted">
            <summary>
            Underline style for converted IME input
            </summary>
        </member>
        <member name="F:RichTextKit.UnderlineStyle.ImeTargetConverted">
            <summary>
            Underline style for converted IME input (target clause)
            </summary>
        </member>
        <member name="F:RichTextKit.UnderlineStyle.ImeTargetNonConverted">
            <summary>
            Underline style for unconverted IME input (target clause)
            </summary>
        </member>
        <member name="T:RichTextKit.Directionality">
            <summary>
            Unicode directionality classes
            </summary>
            <remarks>
            Note, these need to match those used by the JavaScript script that
            generates the .trie resources
            </remarks>
        </member>
        <member name="F:RichTextKit.Directionality.TYPE_MIN">
            Minimum bidi type value. 
        </member>
        <member name="F:RichTextKit.Directionality.TYPE_MAX">
            Maximum bidi type value. 
        </member>
        <member name="T:RichTextKit.GraphemeClusterClass">
            <summary>
            Unicode grapheme cluster classes
            </summary>
            <remarks>
            Note, these need to match those used by the JavaScript script that
            generates the .trie resources
            </remarks>
        </member>
        <member name="T:RichTextKit.LineBreakClass">
            <summary>
            Unicode line break classes
            </summary>
            <remarks>
            Note, these need to match those used by the JavaScript script that
            generates the .trie resources
            </remarks>
        </member>
        <member name="T:RichTextKit.PairedBracketType">
            <summary>
            Unicode paired bracket types
            </summary>
            <remarks>
            Note, these need to match those used by the JavaScript script that
            generates the .trie resources
            </remarks>
        </member>
        <member name="T:RichTextKit.UnicodeClasses">
            <summary>
            Helper for looking up unicode character class information
            </summary>
        </member>
        <member name="M:RichTextKit.UnicodeClasses.Directionality(System.Int32)">
            <summary>
            Get the directionality of a Unicode Code Point
            </summary>
            <param name="codePoint">The code point in question</param>
            <returns>The code point's directionality</returns>
        </member>
        <member name="M:RichTextKit.UnicodeClasses.BidiData(System.Int32)">
            <summary>
            Get the directionality of a Unicode Code Point
            </summary>
            <param name="codePoint">The code point in question</param>
            <returns>The code point's directionality</returns>
        </member>
        <member name="M:RichTextKit.UnicodeClasses.PairedBracketType(System.Int32)">
            <summary>
            Get the bracket type for a Unicode Code Point
            </summary>
            <param name="codePoint">The code point in question</param>
            <returns>The code point's paired bracked type</returns>
        </member>
        <member name="M:RichTextKit.UnicodeClasses.AssociatedBracket(System.Int32)">
            <summary>
            Get the associated bracket type for a Unicode Code Point
            </summary>
            <param name="codePoint">The code point in question</param>
            <returns>The code point's opposite bracket, or 0 if not a bracket</returns>
        </member>
        <member name="M:RichTextKit.UnicodeClasses.LineBreakClass(System.Int32)">
            <summary>
            Get the line break class for a Unicode Code Point
            </summary>
            <param name="codePoint">The code point in question</param>
            <returns>The code point's line break class</returns>
        </member>
        <member name="M:RichTextKit.UnicodeClasses.BoundaryGroup(System.Int32)">
            <summary>
            Get the line break class for a Unicode Code Point
            </summary>
            <param name="codePoint">The code point in question</param>
            <returns>The code point's line break class</returns>
        </member>
        <member name="M:RichTextKit.UnicodeClasses.GraphemeClusterClass(System.Int32)">
            <summary>
            Get the grapheme cluster class for a Unicode Code Point
            </summary>
            <param name="codePoint">The code point in question</param>
            <returns>The code point's grapheme cluster class</returns>
        </member>
        <member name="T:RichTextKit.WordBoundaryClass">
            <summary>
            Unicode word boundary group classes
            </summary>
            <remarks>
            Note, these need to match those used by the JavaScript script that
            generates the .trie resources
            </remarks>
        </member>
        <member name="F:RichTextKit.WordBoundaryClass.AlphaDigit">
            <summary>
            Character is an letter or number
            </summary>
        </member>
        <member name="F:RichTextKit.WordBoundaryClass.Ignore">
            <summary>
            Character should be ignored when locating word boundaries
            </summary>
        </member>
        <member name="F:RichTextKit.WordBoundaryClass.Space">
            <summary>
            Character is a spacing character
            </summary>
        </member>
        <member name="F:RichTextKit.WordBoundaryClass.Punctuation">
            <summary>
            Character is a punctuation character
            </summary>
        </member>
        <member name="T:RichTextKit.Utils.BiDictionary`2">
            <summary>
            A simple bi-directional dictionary
            </summary>
            <typeparam name="T1">Key type</typeparam>
            <typeparam name="T2">Value type</typeparam>
        </member>
        <member name="T:RichTextKit.Utils.BinarySearchExtension">
            <summary>
            Extension methods for binary searching an IReadOnlyList collection
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.BinarySearchExtension.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
            Performs a binary search on the entire contents of an IReadOnlyList
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The list to be searched</param>
            <param name="value">The value to search for</param>
            <returns>The index of the found item; otherwise the bitwise complement of the index of the next larger item</returns>
        </member>
        <member name="M:RichTextKit.Utils.BinarySearchExtension.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},``1,System.Func{``0,``1,System.Int32})">
            <summary>
            Performs a binary search on the entire contents of an IReadOnlyList
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <typeparam name="U">The value type being searched for</typeparam>
            <param name="list">The list to be searched</param>
            <param name="value">The value to search for</param>
            <param name="compare">A comparison function</param>
            <returns>The index of the found item; otherwise the bitwise complement of the index of the next larger item</returns>
        </member>
        <member name="M:RichTextKit.Utils.BinarySearchExtension.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,``1,System.Func{``0,``1,System.Int32})">
            <summary>
            Performs a binary search on a a subset of an IReadOnlyList
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <typeparam name="U">The value type being searched for</typeparam>
            <param name="list">The list to be searched</param>
            <param name="index">The start of the range to be searched</param>
            <param name="length">The length of the range to be searched</param>
            <param name="value">The value to search for</param>
            <param name="compare">A comparison function</param>
            <returns>The index of the found item; otherwise the bitwise complement of the index of the next larger item</returns>
        </member>
        <member name="T:RichTextKit.Utils.Buffer`1">
            <summary>
            A growable array of elements of type `T`
            </summary>
            <typeparam name="T">The buffer element type</typeparam>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.#ctor">
            <summary>
            Constructs a new buffer.
            </summary>
        </member>
        <member name="F:RichTextKit.Utils.Buffer`1._data">
            <summary>
            The data held by this buffer
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.Buffer`1.Underlying">
            <summary>
            The data held by this buffer
            </summary>
        </member>
        <member name="F:RichTextKit.Utils.Buffer`1._length">
            <summary>
            The used length of the buffer
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.Buffer`1.Length">
            <summary>
            Gets or sets the length of the buffer
            </summary>
            <remarks>
            The internal buffer will be grown if the new length is larger
            than the current buffer size.
            </remarks>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.GrowBuffer(System.Int32)">
            <summary>
            Ensures the buffer has sufficient capacity
            </summary>
            <param name="requiredLength"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.Clear">
            <summary>
            Clears the buffer, keeping the internally allocated array.
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.Insert(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Inserts room into the buffer
            </summary>
            <param name="position">The position to insert at</param>
            <param name="length">The length to insert</param>
            <param name="clear">Whether to clear the inserted part of the buffer</param>
            <returns>The new buffer area as a slice</returns>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.Insert(System.Int32,RichTextKit.Utils.Slice{`0})">
            <summary>
            Insert a slice of data into this buffer
            </summary>
            <param name="position">The position to insert at</param>
            <param name="data">The data to insert</param>
            <returns>The newly inserted data as a slice</returns>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.Add(System.Int32,System.Boolean)">
            <summary>
            Adds to the buffer, returning a slice of requested size
            </summary>
            <param name="length">Number of elements to add</param>
            <param name="clear">True to clear the content; otherwise false</param>
            <returns>A slice representing the allocated elements.</returns>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.Add(RichTextKit.Utils.Slice{`0})">
            <summary>
            Add a slice of data to this buffer.
            </summary>
            <param name="slice">The slice to be added</param>
            <returns>A slice representing the added elements.</returns>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.Delete(System.Int32,System.Int32)">
            <summary>
            Delete a section of the buffer
            </summary>
            <param name="from">The position to delete from</param>
            <param name="length">The length to of the deletion</param>
        </member>
        <member name="P:RichTextKit.Utils.Buffer`1.Item(System.Int32)">
            <summary>
            Gets a reference to an element in the buffer
            </summary>
            <param name="index">The element index</param>
            <returns>A reference to the element value.</returns>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.SubSlice(System.Int32,System.Int32)">
            <summary>
            Returns a range within this buffer as a <see cref="T:RichTextKit.Utils.Slice`1"/>
            </summary>
            <param name="start">Start offset of the slice</param>
            <param name="length">Length of the slice</param>
            <returns>A slice for the specified sub-range</returns>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.AsSlice">
            <summary>
            Returns the entire buffer contents as a <see cref="T:RichTextKit.Utils.Slice`1"/>
            </summary>
            <returns>A Slice</returns>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.Split(`0)">
            <summary>
            Split the utf32 buffer on a codepoint type
            </summary>
            <param name="delim">The delimiter</param>
            <returns>An enumeration of slices</returns>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.GetRanges(`0)">
            <summary>
            Split the utf32 buffer on a codepoint type
            </summary>
            <param name="delim">The delimiter to split on</param>
            <returns>An enumeration of offset/length for each range</returns>
        </member>
        <member name="M:RichTextKit.Utils.Buffer`1.Replace(`0,`0)">
            <summary>
            Replaces all instances of a value in the buffer with another value
            </summary>
            <param name="oldValue">The value to replace</param>
            <param name="newValue">The new value</param>
            <returns>The number of replacements made</returns>
        </member>
        <member name="T:RichTextKit.Utils.MappedSlice`1">
            <summary>
            Provides a mapped view of an underlying slice array, selecting arbitrary indicies
            from the source array
            </summary>
            <typeparam name="T">The element type of the underlying array</typeparam>
        </member>
        <member name="M:RichTextKit.Utils.MappedSlice`1.#ctor(RichTextKit.Utils.Slice{`0},RichTextKit.Utils.Slice{System.Int32})">
            <summary>
            Constructs a new mapped array
            </summary>
            <param name="data">The data to be mapped</param>
            <param name="mapping">The index map</param>
        </member>
        <member name="P:RichTextKit.Utils.MappedSlice`1.Underlying">
            <summary>
            Get the underlying slice for this mapped array
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.MappedSlice`1.Mapping">
            <summary>
            Get the index mapping for this mapped array
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.MappedSlice`1.Length">
            <summary>
            Gets the number of elements in this mapping
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.MappedSlice`1.Item(System.Int32)">
            <summary>
            Gets a reference to a mapped element 
            </summary>
            <param name="index">The mapped index to be retrieved</param>
            <returns>A reference to the element</returns>
        </member>
        <member name="M:RichTextKit.Utils.MappedSlice`1.ToArray">
            <summary>
            Get the content of this mapped slice as an array
            </summary>
            <returns>The content as an array</returns>
        </member>
        <member name="T:RichTextKit.Utils.IRun">
            <summary>
            Interface to a run object with a start offset and a length
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.IRun.Offset">
            <summary>
            Offset of the start of this run
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.IRun.Length">
            <summary>
            Length of this run
            </summary>
        </member>
        <member name="T:RichTextKit.Utils.SubRun">
            <summary>
            Represents a sub-run in a list of runs
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.SubRun.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a new sub-run
            </summary>
            <param name="index">The run index</param>
            <param name="offset">The sub-run offset</param>
            <param name="length">The sub-run length</param>
            <param name="partial">True if the sub-run is partial run</param>
        </member>
        <member name="F:RichTextKit.Utils.SubRun.Index">
            <summary>
            The index of the run in the list of runs
            </summary>
        </member>
        <member name="F:RichTextKit.Utils.SubRun.Offset">
            <summary>
            Offset of this sub-run in the containing run
            </summary>
        </member>
        <member name="F:RichTextKit.Utils.SubRun.Length">
            <summary>
            Length of this sub-run in the containing run
            </summary>
        </member>
        <member name="F:RichTextKit.Utils.SubRun.Partial">
            <summary>
            Indicates if this sub-run is partial sub-run
            </summary>
        </member>
        <member name="T:RichTextKit.Utils.RunExtensions">
            <summary>
            Helpers for iterating over a set of consecutive runs
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.RunExtensions.GetInterectingRuns``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32)">
            <summary>
            Given a list of consecutive runs, a start index and a length
            provides a list of sub-runs in the list of runs.
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The list of runs</param>
            <param name="offset">The offset of the run</param>
            <param name="length">The length of the run</param>
            <returns>An enumerable collection of SubRuns</returns>
        </member>
        <member name="M:RichTextKit.Utils.RunExtensions.GetIntersectingRunsReverse``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32)">
            <summary>
            Given a list of consecutive runs, a start index and a length
            provides a list of sub-runs in the list of runs (in reverse order)
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The list of runs</param>
            <param name="offset">The offset of the run</param>
            <param name="length">The length of the run</param>
            <returns>An enumerable collection of SubRuns</returns>
        </member>
        <member name="M:RichTextKit.Utils.RunExtensions.TotalLength``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Get the total length of a list of consecutive runs
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="list">The list of runs</param>
            <returns>The total length</returns>
        </member>
        <member name="M:RichTextKit.Utils.RunExtensions.CheckValid``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Check that a list of runs is valid
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="list">The list to be checked</param>
        </member>
        <member name="M:RichTextKit.Utils.RunExtensions.CheckValid``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
            Check that a list of runs is valid
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="list">The list to be checked</param>
            <param name="totalLength">The expected total length of the list of runs</param>
        </member>
        <member name="T:RichTextKit.Utils.Slice`1">
            <summary>
            Represents a slice of an array
            </summary>
            <typeparam name="T">The array type</typeparam>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.#ctor(`0[])">
            <summary>
            Constructs a new slice covering the entire passed array.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Constructs a new slice for part of the passed array.
            </summary>
            <param name="array"></param>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="P:RichTextKit.Utils.Slice`1.Length">
            <summary>
            Gets the length of the array slice.
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.Clear">
            <summary>
            Clears the entire slice content
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.Fill(`0)">
            <summary>
            Fill the slice with a specified value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.Set(RichTextKit.Utils.Slice{`0})">
            <summary>
            Copy data from another slice into this one
            </summary>
            <param name="Source">The source data</param>
        </member>
        <member name="P:RichTextKit.Utils.Slice`1.Item(System.Int32)">
            <summary>
            Gets a reference to an element in the slice
            </summary>
            <param name="index">The element index</param>
            <returns>A reference to the element value.</returns>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.SubSlice(System.Int32,System.Int32)">
            <summary>
            Creates a sub-slice of this slice
            </summary>
            <param name="start">The slice start index</param>
            <param name="length">The slice length</param>
            <returns>A new array slice</returns>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.SubSlice(System.Int32)">
            <summary>
            Creates a subslice of an array slice, from a specified position to the end
            </summary>
            <param name="start">The slice start index</param>
            <returns>A new array slice</returns>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.ToArray">
            <summary>
            Gets the slice contents as a new array  
            </summary>
            <returns></returns>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.Copy">
            <summary>
            Creates a copy of this slice on a new underlying array
            </summary>
            <returns>A slice representing the copy</returns>
        </member>
        <member name="P:RichTextKit.Utils.Slice`1.Underlying">
            <summary>
            Gets the underlying array
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.Slice`1.Start">
            <summary>
            Gets the offset of this slice within the underlying array
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.Split(`0)">
            <summary>
            Split this slice on a delimiter
            </summary>
            <param name="delimiter">The delimiter</param>
            <returns>An enumeration of slices</returns>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.IndexOf(`0)">
            <summary>
            Find the first index of a specified value
            </summary>
            <param name="value">The value to search for</param>
            <returns>The index of the first occurance, or -1 if not found</returns>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.IndexOfAny(`0[])">
            <summary>
            Find the first index of one or more valus
            </summary>
            <param name="values">The value to search for</param>
            <returns>The index of the first occurance, of -1 if not found</returns>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.Replace(`0,`0)">
            <summary>
            Replace all instances of a value with another
            </summary>
            <param name="replace">The value to replace</param>
            <param name="with">The replacement value</param>
        </member>
        <member name="P:RichTextKit.Utils.Slice`1.Empty">
            <summary>
            A shared empty slice of type T
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.Slice`1.AsSpan">
            <summary>
            Get the slice as a Span
            </summary>
            <returns></returns>
        </member>
        <member name="T:RichTextKit.Utils.UndoManager`1">
            <summary>
            Implements an manager for undo operations
            </summary>
            <typeparam name="T">A context object type (eg: document type)</typeparam>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.#ctor(`0)">
            <summary>
            Constructs a new undo manager
            </summary>
            <param name="context">The document context object</param>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.Do(RichTextKit.Utils.UndoUnit{`0})">
            <summary>
            Execute an undo unit and add it to the manager 
            </summary>
            <param name="unit">The undo unit to execute</param>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.Undo">
            <summary>
            Undoes the last performed operation
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.Redo">
            <summary>
            Redoes previously undone operations
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.OpenGroup(System.String)">
            <summary>
            Stars a group operation
            </summary>
            <param name="description">A user readable description of the operation</param>
            <returns>An IDisposable that when disposed will close the group</returns>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.OpenGroup(RichTextKit.Utils.UndoGroup{`0})">
            <summary>
            Stars a group operation
            </summary>
            <param name="group">The UndoGroup to be used</param>
            <returns>An IDisposable that when disposed will close the group</returns>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.CloseGroup">
            <summary>
            Ends the current group operation
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.Clear">
            <summary>
            Clear and reset the undo manager
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.UndoManager`1.CanUndo">
            <summary>
            Check if can undo
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.UndoManager`1.CanRedo">
            <summary>
            Check if can redo
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.UndoManager`1.UndoDescription">
            <summary>
            Gets the description of the next undo operation  
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.UndoManager`1.RedoDescription">
            <summary>
            Gets the description of the next redo operation  
            </summary>
        </member>
        <member name="E:RichTextKit.Utils.UndoManager`1.StartOperation">
            <summary>
            Event fired when any operation (or group of operations) starts
            </summary>
        </member>
        <member name="E:RichTextKit.Utils.UndoManager`1.EndOperation">
            <summary>
            Event fired when any operation (or group of operations) ends
            </summary>
        </member>
        <member name="E:RichTextKit.Utils.UndoManager`1.ModifiedChanged">
            <summary>
            Fired when the modified state of the document changes
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.UndoManager`1.IsModified">
            <summary>
            Checks if the document is currently modified
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.MarkUnmodified">
            <summary>
            Mark the document as currently unmodified
            </summary>
            <remarks>
            Typically this method would be called when the document
            is saved.
            </remarks>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.Seal">
            <summary>
            Seals the last item to prevent changes
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.GetUnsealedUnit">
            <summary>
            Get the current unsealed unit
            </summary>
            <returns>The unsealed unit if available, otherwise null</returns>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.GetUndoUnit">
            <summary>
            Retrieves the unit that would be executed on Undo
            </summary>
            <returns>An UndoUnit, or null</returns>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.GetRedoUnit">
            <summary>
            Retrieves the unit that would be executed on Redo
            </summary>
            <returns>An UndoUnit, or null</returns>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.OnStartOperation">
            <summary>
            Notifies that an operation (or group of operations) is about to start
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.OnEndOperation">
            <summary>
            Notifies that an operation (or group of operations) has finished
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.OnModifiedChanged">
            <summary>
            Notifies when the modified state of the document changes
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.Add(RichTextKit.Utils.UndoUnit{`0})">
            <summary>
            Adds a unit to the undo manager without executing it
            </summary>
            <param name="unit">The UndoUnit to add</param>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.RemoveAllRedoUnits">
            <summary>
            Removes all units in the redo queue
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.UndoManager`1.IsBlocked">
            <summary>
            Checks if the undo manager is currently blocked
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.Block">
            <summary>
            Blocks the undo manager
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoManager`1.Unblock">
            <summary>
            Unblocks the undo manager
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.UndoManager`1.CurrentGroup">
            <summary>
            Get the currently undo group
            </summary>
        </member>
        <member name="T:RichTextKit.Utils.UndoUnit`1">
            <summary>
            Base class for all undo units
            </summary>
            <typeparam name="T">The document context type</typeparam>
        </member>
        <member name="M:RichTextKit.Utils.UndoUnit`1.#ctor">
            <summary>
            Constructs a new UndoUnit
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoUnit`1.#ctor(System.String)">
            <summary>
            Constructs a new UndoUnit with a description
            </summary>
            <param name="description">The description of this unit</param>
        </member>
        <member name="P:RichTextKit.Utils.UndoUnit`1.Description">
            <summary>
            Gets the description of this undo unit
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoUnit`1.Do(`0)">
            <summary>
            Instructs the unit to execute the "Do" operation
            </summary>
            <param name="context">The document context object</param>
        </member>
        <member name="M:RichTextKit.Utils.UndoUnit`1.Redo(`0)">
            <summary>
            Instructs the unit to execute the "ReDo" operation
            </summary>
            <remarks>
            The default implementation simply calls "Do"
            </remarks>
            <param name="context">The document context object</param>
        </member>
        <member name="M:RichTextKit.Utils.UndoUnit`1.Undo(`0)">
            <summary>
            Instructs the unit to execute the "Undo" operation
            </summary>
            <param name="context">The document context object</param>
        </member>
        <member name="M:RichTextKit.Utils.UndoUnit`1.Seal">
            <summary>
            Informs the unit that no subsequent coalescing operations
            will be appended to this unit
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.UndoUnit`1.Sealed">
            <summary>
            Checks is this item is sealed
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.UndoUnit`1.Group">
            <summary>
            Gets or sets the group that owns this undo unit
            </summary>
            <remarks>
            Will be null if the undo unit isn't within a group operation
            </remarks>
        </member>
        <member name="T:RichTextKit.Utils.UndoGroup`1">
            <summary>
            Implements an Undo unit that groups other units
            into a single operation
            </summary>
            <typeparam name="T">The document context type</typeparam>
        </member>
        <member name="M:RichTextKit.Utils.UndoGroup`1.#ctor(System.String)">
            <summary>
            Constructs a new UndoGroup with a description
            </summary>
            <param name="description">The description</param>
        </member>
        <member name="M:RichTextKit.Utils.UndoGroup`1.OnOpen(`0)">
            <summary>
            Notifies this group that it's been opened
            </summary>
            <param name="context">The document context object</param>
        </member>
        <member name="M:RichTextKit.Utils.UndoGroup`1.OnClose(`0)">
            <summary>
            Notifies this group that it's been closed
            </summary>
            <param name="context">The document context object</param>
        </member>
        <member name="M:RichTextKit.Utils.UndoGroup`1.Add(RichTextKit.Utils.UndoUnit{`0})">
            <summary>
            Adds a unit to this group
            </summary>
            <param name="unit">The UndoUnit to be added</param>
        </member>
        <member name="M:RichTextKit.Utils.UndoGroup`1.Insert(System.Int32,RichTextKit.Utils.UndoUnit{`0})">
            <summary>
            Inserts an unit to this group
            </summary>
            <param name="position">The position at which the unit should be inserted</param>
            <param name="unit">The UndoUnit to be inserted</param>
        </member>
        <member name="P:RichTextKit.Utils.UndoGroup`1.LastUnit">
            <summary>
            Gets the last UndoUnit in this group
            </summary>
        </member>
        <member name="P:RichTextKit.Utils.UndoGroup`1.Units">
            <summary>
            Get the list of units in this group
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoGroup`1.Do(`0)">
            <summary>
            The method on the UndoGroup class is never called by the 
            UndoManager Never. See OnOpen and OnClose instead which
            are called as the group is constructed
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.UndoGroup`1.Redo(`0)">
            <inheritdoc />
        </member>
        <member name="M:RichTextKit.Utils.UndoGroup`1.Undo(`0)">
            <inheritdoc />
        </member>
        <member name="T:RichTextKit.Utils.Utf32Buffer">
            <summary>
            Represents a buffer of UTF-32 encoded code point data
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.#ctor">
            <summary>
            Constructs a new Utf32Buffer
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.#ctor(System.String)">
            <summary>
            Constructs a Utf32 buffer with an initial string
            </summary>
            <param name="str">The string to initialize with</param>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.Clear">
            <summary>
            Clears this buffer.
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.Add(RichTextKit.Utils.Slice{System.Int32})">
            <summary>
            Appends utf32 data to this buffer
            </summary>
            <param name="data">The UTF32 data to be appended</param>
            <returns>A slice representing the added UTF-32 data.</returns>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.Add(System.String)">
            <summary>
            Appends text to this buffer, converting from UTF-16 to UTF-32
            </summary>
            <param name="str">The string of text to be inserted</param>
            <returns>A slice representing the added UTF-32 data.</returns>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.Add(System.ReadOnlySpan{System.Char})">
            <summary>
            Appends text to this buffer, converting from UTF-16 to UTF-32
            </summary>
            <param name="str">The string of text to be inserted</param>
            <returns>A slice representing the added UTF-32 data.</returns>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.Insert(System.Int32,RichTextKit.Utils.Slice{System.Int32})">
            <summary>
            Appends utf32 data to this buffer
            </summary>
            <param name="position">Position to insert the string</param>
            <param name="data">The string of text to be appended</param>
            <returns>A slice representing the added UTF-32 data.</returns>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.Insert(System.Int32,System.String)">
            <summary>
            Inserts text to this buffer, converting from UTF-16 to UTF-32
            </summary>
            <param name="position">The position to insert the string</param>
            <param name="str">The string of text to be inserted</param>
            <returns>A slice representing the added UTF-32 data.</returns>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.Insert(System.Int32,System.ReadOnlySpan{System.Char})">
            <summary>
            Inserts text to this buffer, converting from UTF-16 to UTF-32
            </summary>
            <param name="position">The position to insert the string</param>
            <param name="str">The string of text to be inserted</param>
            <returns>A slice representing the added UTF-32 data.</returns>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.Delete(System.Int32,System.Int32)">
            <summary>
            Delete a section of the buffer
            </summary>
            <param name="from">The position to delete from</param>
            <param name="length">The length to of the deletion</param>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.Utf32OffsetToUtf16Offset(System.Int32)">
            <summary>
            Convers an offset into this buffer to a UTF-16 offset in the originally 
            added string.
            </summary>
            <remarks>
            This function assumes the was text added to the buffer as UTF-16
            and hasn't been modified in any way since.
            </remarks>
            <param name="utf32Offset">The UTF-3232 offset to convert</param>
            <returns>The converted UTF-16 character offset</returns>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.Utf16OffsetToUtf32Offset(System.Int32)">
            <summary>
            Converts an offset in the original UTF-16 string, a code point index into 
            this UTF-32 buffer.
            </summary>
            <param name="utf16Offset">The utf-16 character index</param>
            <returns>The utf-32 code point index</returns>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.ToString">
            <summary>
            Gets the enture buffer's content as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.GetString(System.Int32,System.Int32)">
            <summary>
            Gets a part of the buffer as a string.
            </summary>
            <param name="start">The UTF-32 code point index of the first character to retrieve</param>
            <param name="length">The number of code points in the string to be retrieved</param>
            <returns>A string equivalent to the specified code point range.</returns>
        </member>
        <member name="F:RichTextKit.Utils.Utf32Buffer._surrogatePositions">
            <summary>
            Indicies of all code points in the in the buffer
            that were decoded from a surrogate pair
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Buffer.BuildSurrogatePositions">
            <summary>
            Build an array indicies to all characters that require surrogates
            when converted to utf16.
            </summary>
        </member>
        <member name="T:RichTextKit.Utils.Utf32Utils">
            <summary>
            Miscellaneous utility functions for working with UTF-32 data.
            </summary>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Utils.FromUtf32(RichTextKit.Utils.Slice{System.Int32})">
            <summary>
            Convert a slice of UTF-32 integer code points to a string
            </summary>
            <param name="buffer">The code points to convert</param>
            <returns>A string</returns>
        </member>
        <member name="M:RichTextKit.Utils.Utf32Utils.ToUtf32(System.String)">
            <summary>
            Converts a string to an integer array of UTF-32 code points
            </summary>
            <param name="str">The string to convert</param>
            <returns>The converted code points</returns>
        </member>
        <member name="T:RichTextKit.SwapHelper">
            <summary>
            Helper class to swap two values
            </summary>
        </member>
        <member name="M:RichTextKit.SwapHelper.Swap``1(``0@,``0@)">
            <summary>
            Swaps two values
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="a">The first value</param>
            <param name="b">The second value</param>
        </member>
    </members>
</doc>
